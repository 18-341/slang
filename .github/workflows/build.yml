name: CI Build

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - preset: clang-sanitize
            os: ubuntu-latest
          - preset: gcc-release
            os: ubuntu-24.04-arm
          - preset: gcc-11-release
            os: ubuntu-latest
          - preset: gcc-debug-shared
            os: ubuntu-latest
          - preset: gcc-debug-noexcept
            os: ubuntu-latest
          - preset: macos-release
            os: macos-latest
          - preset: win64-release
            os: windows-latest
          - preset: win64-debug-shared
            os: windows-latest
          - preset: win64-debug-noexcept
            os: windows-latest
          - preset: wasi-sdk
            os: ubuntu-latest
          - preset: wasi-sdk-pthread
            os: ubuntu-latest

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main"
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install -y g++-14 g++-11 clang-20 clang-tidy-20
    - uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest'
    - uses: maxim-lobanov/setup-xcode@v1
      if: matrix.os == 'macos-latest'
      with:
        xcode-version: 'latest'
    - uses: konsumer/install-wasi-sdk@v1
      if: ${{ startsWith(matrix.preset, 'wasi-') }}
    - uses: bytecodealliance/actions/wasmtime/setup@v1
      if: ${{ startsWith(matrix.preset, 'wasi-') }}
    - name: Configure
      run: cmake --preset ${{ matrix.preset }} -DSLANG_CI_BUILD=ON -DSLANG_INCLUDE_UVM_TEST=ON
      if: ${{ !startsWith(matrix.preset, 'wasi-') }}
    - name: Configure
      run: cmake -B build/${{ matrix.preset }} -DCMAKE_TOOLCHAIN_FILE=${WASI_SDK_PATH}/share/cmake/${{ matrix.preset }}.cmake -DSLANG_USE_THREADS=${{ contains(matrix.preset, 'pthread') && 'ON' || 'OFF' }} -DSLANG_CI_BUILD=ON -DSLANG_INCLUDE_UVM_TEST=ON
      if: ${{ startsWith(matrix.preset, 'wasi-') }}
    - name: Build
      run: cmake --build build/${{ matrix.preset }} -j8
    - name: Run tests
      run: ctest --test-dir build/${{ matrix.preset }} --output-on-failure --no-tests=error -j8
    - name: Install & Package
      if: github.ref == 'refs/heads/master' && ${{ !startsWith(matrix.preset, 'wasi-') }}
      shell: bash
      run: |
        # Install into a per-preset prefix
        cmake --install build/${{ matrix.preset }} --prefix "$PWD/install/${{ matrix.preset }}"
        mkdir -p dist

        # Name per OS/preset
        PLATFORM=${{ runner.os }}
        PRESET=${{ matrix.preset }}

        if [[ "$PLATFORM" == "Windows" ]]; then
          OUT="slang-${PLATFORM}-${PRESET}.zip"
          7z a "dist/$OUT" "./install/${PRESET}/*" >/dev/null
        else
          OUT="slang-${PLATFORM}-${PRESET}.tar.gz"
          tar -C "install/${PRESET}" -czf "dist/$OUT" .
        fi

        # Checksums
        (cd dist && shasum -a 256 "$OUT" > "${OUT}.sha256" 2>/dev/null || \
         cd dist && certutil -hashfile "$OUT" SHA256 | sed -n '2p' | tr -d '\r' > "${OUT}.sha256")

    - name: Upload packaged artifact
      if: github.ref == 'refs/heads/master' && ${{ !startsWith(matrix.preset, 'wasi-') }}
      uses: actions/upload-artifact@v4
      with:
        name: pkg-${{ runner.os }}-${{ matrix.preset }}
        path: dist/*
  publish:
    if: github.ref == 'refs/heads/master'
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-bundle

      - name: Flatten bundle
        run: |
          mkdir -p dist
          find release-bundle -type f -name '*.tar.gz' -o -name '*.zip' -o -name '*.sha256' -exec cp {} dist/ \;
          ls -l dist

      - name: Publish master-latest release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: master-latest
          name: Slang master-latest
          body: "Automated build from ${{ github.sha }} on ${{ github.ref }}"
          files: dist/*
          prerelease: true
          draft: false

      # Immutable tag for reproducibility: master-<sha>
      - name: Publish immutable release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: master-${{ github.sha }}
          name: Slang master-${{ github.sha }}
          body: "Immutable build for commit ${{ github.sha }}"
          files: dist/*
          prerelease: true
          draft: false
    concurrency:
      group: producer-master
      cancel-in-progress: true

