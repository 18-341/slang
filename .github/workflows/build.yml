name: CI Build

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    paths:
      - 'source/**'
      - 'include/**'
      - 'tools/**'
      - 'bindings/**'
      - 'tests/**'
      - 'external/**'
      - 'CMakeLists.txt'
      - 'cmake/**'
      - 'CMakePresets.json'
      - '.github/workflows/build.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'source/**'
      - 'include/**'
      - 'tools/**'
      - 'bindings/**'
      - 'tests/**'
      - 'external/**'
      - 'CMakeLists.txt'
      - 'cmake/**'
      - 'CMakePresets.json'
      - '.github/workflows/build.yml'

concurrency:
  group: producer-master
  cancel-in-progress: true

jobs:
  # ---------- PR validation: build full matrix, no publishing ----------
  build:
    if: github.event_name == 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        include:
          - preset: clang-sanitize
            os: ubuntu-latest
          - preset: gcc-release
            os: ubuntu-latest
          - preset: gcc-11-release
            os: ubuntu-latest
          - preset: gcc-debug-shared
            os: ubuntu-latest
          - preset: gcc-debug-noexcept
            os: ubuntu-latest
          - preset: macos-release
            os: macos-latest
          - preset: win64-release
            os: windows-latest
          - preset: win64-debug-shared
            os: windows-latest
          - preset: win64-debug-noexcept
            os: windows-latest
          - preset: wasi-sdk
            os: ubuntu-latest
          - preset: wasi-sdk-pthread
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    env:
      CMAKE_C_COMPILER_LAUNCHER: sccache
      CMAKE_CXX_COMPILER_LAUNCHER: sccache
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Enable sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Export CMake launchers
        run: |
          echo "CMAKE_C_COMPILER_LAUNCHER=${CMAKE_C_COMPILER_LAUNCHER}"   >> $GITHUB_ENV
          echo "CMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}" >> $GITHUB_ENV

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -fsSL https://apt.llvm.org/llvm-snapshot.gpg.key | sudo gpg --dearmor -o /usr/share/keyrings/llvm-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/llvm-archive-keyring.gpg] http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main" | sudo tee /etc/apt/sources.list.d/llvm.list
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install -y g++-14 g++-11 clang-20 clang-tidy-20

      - name: MSVC env (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup Xcode (macOS)
        if: matrix.os == 'macos-latest'
        uses: maxim-lobanov/setup-xcode@v1
        with: { xcode-version: 'latest' }

      - uses: konsumer/install-wasi-sdk@v1
        if: startsWith(matrix.preset, 'wasi-')

      - uses: bytecodealliance/actions/wasmtime/setup@v1
        if: startsWith(matrix.preset, 'wasi-')

      - name: Configure
        if: ${{ !startsWith(matrix.preset, 'wasi-') }}
        shell: bash
        run: |
          if [[ "${{ matrix.preset }}" == win64-debug* && "${{ matrix.os }}" == "windows-latest" ]]; then
            # Disable sccache for Windows debug builds to avoid PDB conflicts
            cmake --preset ${{ matrix.preset }} \
                  -DSLANG_CI_BUILD=ON -DSLANG_INCLUDE_UVM_TEST=ON
          else
            cmake --preset ${{ matrix.preset }} \
                  -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CMAKE_C_COMPILER_LAUNCHER }} \
                  -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CMAKE_CXX_COMPILER_LAUNCHER }} \
                  -DSLANG_CI_BUILD=ON -DSLANG_INCLUDE_UVM_TEST=ON
          fi

      - name: Configure (WASI)
        if: startsWith(matrix.preset, 'wasi-')
        shell: bash
        run: |
          cmake -B build/${{ matrix.preset }} \
                -DCMAKE_TOOLCHAIN_FILE=${WASI_SDK_PATH}/share/cmake/${{ matrix.preset }}.cmake \
                -DSLANG_USE_THREADS=${{ contains(matrix.preset, 'pthread') && 'ON' || 'OFF' }} \
                -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CMAKE_C_COMPILER_LAUNCHER }} \
                -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CMAKE_CXX_COMPILER_LAUNCHER }} \
                -DSLANG_CI_BUILD=ON -DSLANG_INCLUDE_UVM_TEST=ON

      - name: Build
        shell: bash
        run: |
          if [[ "${{ matrix.preset }}" == win64-debug* && "${{ matrix.os }}" == "windows-latest" ]]; then
            cmake --build build/${{ matrix.preset }} -j4
          else
            cmake --build build/${{ matrix.preset }} -j8
          fi

      - name: Run tests
        run: ctest --test-dir build/${{ matrix.preset }} --output-on-failure --no-tests=error -j8

  # ---------- Post-merge: rebuild ONLY canonical artifacts & publish (3 OS) ----------
  publish-linux:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions: { contents: write }
    env:
      PRESET: gcc-11-release
      CMAKE_C_COMPILER_LAUNCHER: sccache
      CMAKE_CXX_COMPILER_LAUNCHER: sccache
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Enable sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Install dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-11

      - name: Configure (canonical)
        run: |
          cmake --preset ${PRESET} \
                -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CMAKE_C_COMPILER_LAUNCHER }} \
                -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CMAKE_CXX_COMPILER_LAUNCHER }} \
                -DSLANG_CI_BUILD=ON -DSLANG_INCLUDE_UVM_TEST=OFF

      - name: Build (canonical)
        run: cmake --build build/${PRESET} -j8

      - name: Install & Package (canonical)
        shell: bash
        run: |
          set -euo pipefail
          cmake --install build/${PRESET} --prefix "$PWD/install/${PRESET}"
          mkdir -p dist
          OUT="slang-Linux-${PRESET}.tar.gz"
          tar -C "install/${PRESET}" -czf "dist/$OUT" .
          shasum -a 256 "dist/$OUT" > "dist/$OUT.sha256"
          ls -l dist

      - name: Publish moving release (master-latest)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: master-latest
          name: 341 Slang master-latest
          body: "Canonical rebuilds (Linux/macOS/Windows). Merge: ${{ github.sha }}."
          files: dist/*
          prerelease: true
          draft: false

      - name: Publish immutable release (master-<sha>)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: master-${{ github.sha }}
          name: 341 Slang master-${{ github.sha }}
          body: "Canonical rebuilds for commit ${{ github.sha }}."
          files: dist/*
          prerelease: true
          draft: false

  publish-macos:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: macos-latest
    needs: [publish-linux]
    permissions: { contents: write }
    env:
      PRESET: macos-release
      CMAKE_C_COMPILER_LAUNCHER: sccache
      CMAKE_CXX_COMPILER_LAUNCHER: sccache
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Enable sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with: { xcode-version: 'latest' }

      - name: Configure (canonical)
        run: |
          cmake --preset ${PRESET} \
                -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CMAKE_C_COMPILER_LAUNCHER }} \
                -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CMAKE_CXX_COMPILER_LAUNCHER }} \
                -DSLANG_CI_BUILD=ON -DSLANG_INCLUDE_UVM_TEST=OFF

      - name: Build (canonical)
        run: cmake --build build/${PRESET} -j8

      - name: Install & Package (canonical)
        shell: bash
        run: |
          set -euo pipefail
          cmake --install build/${PRESET} --prefix "$PWD/install/${PRESET}"
          mkdir -p dist
          OUT="slang-macOS-${PRESET}.tar.gz"
          tar -C "install/${PRESET}" -czf "dist/$OUT" .
          shasum -a 256 "dist/$OUT" > "dist/$OUT.sha256"
          ls -l dist

      - name: Attach to existing release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: master-latest
          files: dist/*

      - name: Attach to immutable release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: master-${{ github.sha }}
          files: dist/*

  publish-windows:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: windows-latest
    needs: [publish-linux]
    permissions: { contents: write }
    env:
      PRESET: win64-release
      CMAKE_C_COMPILER_LAUNCHER: sccache
      CMAKE_CXX_COMPILER_LAUNCHER: sccache
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: MSVC env
        uses: ilammy/msvc-dev-cmd@v1

      - name: Enable sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Configure (canonical)
        run: cmake --preset ${{ env.PRESET }} -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CMAKE_C_COMPILER_LAUNCHER }} -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CMAKE_CXX_COMPILER_LAUNCHER }} -DSLANG_CI_BUILD=ON -DSLANG_INCLUDE_UVM_TEST=OFF

      - name: Build (canonical)
        run: cmake --build build/${{ env.PRESET }} -j8

      - name: Install & Package (canonical)
        shell: bash
        run: |
          set -euo pipefail
          cmake --install build/${PRESET} --prefix "$PWD/install/${PRESET}"
          mkdir -p dist
          OUT="slang-Windows-${PRESET}.zip"
          7z a "dist/$OUT" "./install/${PRESET}/*" >/dev/null
          pwsh -Command "(Get-FileHash 'dist/$OUT' -Algorithm SHA256).Hash | Out-File -NoNewline 'dist/$OUT.sha256'"

      - name: Attach to existing release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: master-latest
          files: dist/*

      - name: Attach to immutable release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: master-${{ github.sha }}
          files: dist/*
