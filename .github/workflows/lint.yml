name: Lint

on:
  push:
  pull_request:

concurrency:
  group: lint-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pre-commit hooks
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          pre-commit-${{ runner.os }}-

    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files --show-diff-on-failure

  format-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install formatting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 flake8-bugbear isort
        sudo apt-get update
        sudo apt-get install -y clang-format cmake-format

    - name: Check Python formatting (Black)
      run: |
        black --check --diff pyslang/ bindings/python/ scripts/ --exclude "docs/"

    - name: Check Python imports (isort)  
      run: |
        isort --check-only --diff pyslang/ bindings/python/ scripts/

    - name: Check Python linting (flake8)
      run: |
        flake8 pyslang/ bindings/python/ scripts/

    - name: Check C++ formatting (clang-format)
      run: |
        find . -name "*.cpp" -o -name "*.h" | grep -v "^./external/" | xargs clang-format --dry-run --Werror

    - name: Check CMake formatting
      run: |
        find . -name "*.cmake" -o -name "CMakeLists.txt" | grep -v "^./external/" | xargs cmake-format --check

  file-checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for merge conflicts
      run: |
        if grep -r "<<<<<<< " --include="*.cpp" --include="*.h" --include="*.py" --include="*.cmake" --include="*.md" . ; then
          echo "Merge conflict markers found!"
          exit 1
        fi

    - name: Check file endings
      run: |
        # Check for files without newline at end
        for file in $(find . -type f \( -name "*.cpp" -o -name "*.h" -o -name "*.py" -o -name "*.cmake" -o -name "*.md" \) ! -path "./external/*"); do
          if [ -s "$file" ] && [ "$(tail -c 1 "$file" | wc -l)" -eq 0 ]; then
            echo "File $file does not end with newline"
            exit 1
          fi
        done

    - name: Check for trailing whitespace
      run: |
        if grep -r " $" --include="*.cpp" --include="*.h" --include="*.py" --include="*.cmake" --include="*.md" . --exclude-dir=external; then
          echo "Trailing whitespace found!"
          exit 1
        fi

    - name: Validate YAML files
      run: |
        python3 -c "
        import yaml
        import sys
        import glob
        
        files = glob.glob('**/*.yml', recursive=True) + glob.glob('**/*.yaml', recursive=True)
        for f in files:
          if 'external/' in f:
            continue
          try:
            with open(f, 'r') as file:
              yaml.safe_load(file)
            print(f'✓ {f}')
          except Exception as e:
            print(f'✗ {f}: {e}')
            sys.exit(1)
        "