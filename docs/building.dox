/** @page building Building & Installation
@brief Instructions for building and installing the slang library and tools

@tableofcontents

@section source Getting the Source

All source code is hosted on [GitHub](https://github.com/MikePopoloski/slang)

@code{.ansi}
git clone https://github.com/MikePopoloski/slang.git
@endcode

@section dependencies Dependencies

slang requires the following dependencies in order to build:
- [python 3](https://www.python.org/)
- [CMake](https://cmake.org/) (3.15 or later)
- C++17 compatible compiler
    - GCC 9.1 is the minimum supported version
    - clang 10 is the minimum supported version
    - MSVC support is tested only against the most recent update of VS 2022
    - Other compilers (including earlier versions of the ones listed above) may or may not work.
      Note that AppleClang has its own versioning scheme -- you generally need a newer AppleClang
      to get full C++17 support, and Apple ties Xcode updates to OS versions so you may be forced
      to update your OS.

@section building-start Quick Start

The build should work out of the box on all supported platforms with the same set of steps:

@code{.ansi}
cmake -B build
cmake --build build
@endcode

Tests are included in the configuration by default. You can run them via ctest:

@code{.ansi}
cd build && ctest --output-on-failure
@endcode

@section build-options Build Options

Besides the built-in cmake options, there are slang-specific options that may be
set to customize the build:
Option | Description | Default
------ | ----------- | -------
SLANG_INCLUDE_TOOLS | Include tools targets in the build (such as the slang driver executable) | ON
SLANG_INCLUDE_TESTS | Include tests in the build | ON
SLANG_INCLUDE_INSTALL | Include installation targets in the build | ON
SLANG_INCLUDE_DOCS | Include docs in the build | OFF
SLANG_INCLUDE_PYLIB | Include Python bindings in the build | OFF
SLANG_INCLUDE_COVERAGE | Include code coverage targets in the build | OFF
BUILD_SHARED_LIBS | Build a shared library instead of static | OFF
SLANG_FUZZ_TARGET | Turn on to enable some changes to make binaries easier to fuzz test | OFF
SLANG_CI_BUILD | Enable additional longer-running tests for automated builds | OFF
SLANG_CLANG_TIDY | The path to a clang-tidy binary to run against the slang sources | ""
SLANG_WARN_FLAGS | Extra compiler warning flags to enable when building slang | ""
SLANG_CMAKECONFIG_INSTALL_DIR | If install rules are included, this path is used to install the generated cmake config for the slang package | ${CMAKE_INSTALL_LIBDIR}/cmake/slang

@section build-scripts Build Scripts

This section documents scripts that are invoked during the build that may be of
general interest or useful to know if you're modifying how the build works.

## Version info

On every build, the current git revision hash is queried and included in the `Version.cpp`
header to expose to the rest of the library. If the revision is unchanged from the last
build no additional work will be done.

## Syntax generation

Syntax nodes in slang are expressed in the `scripts/syntax.txt` file and processed
during the build into generated C++ classes by the `syntax_gen.py` script.

## Diagnostic generation

Diagnostics, similarly to syntax nodes, are expressed in the `scripts/diagnostics.txt`
file and processed into C++ definitions by the `diagnostic_gen.py` script.

@section doc-builds Building Documentation

This section contains instructions for building the documentation.

## Dependencies

- [doxygen](http://www.doxygen.nl/) - at least 1.8.17

## Steps

Run cmake with docs enabled:

@code{.ansi}
cmake -B build -DSLANG_INCLUDE_DOCS=ON
cmake --build build --target docs
@endcode

The output website is located at `build/docs/html/`

*/
