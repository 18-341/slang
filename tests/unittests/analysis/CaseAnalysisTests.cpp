// SPDX-FileCopyrightText: Michael Popoloski
// SPDX-License-Identifier: MIT

#include "Test.h"
#include <fmt/core.h>

#include "slang/analysis/CaseDecisionDag.h"

using namespace slang::analysis;

static void testDag(const std::vector<std::string>& clauses, uint32_t bitWidth,
                    const flat_hash_set<uint32_t>& expectedUnreachable = {},
                    const std::optional<std::string>& expectedCounterexample = {},
                    const flat_hash_set<std::pair<uint32_t, uint32_t>>& expectedOverlaps = {},
                    bool wildcardX = false, bool expectGaveUp = false) {
    std::vector<SVInt> svClauses;
    for (const auto& clause : clauses)
        svClauses.emplace_back(SVInt::fromString(fmt::format("{}'b{}", bitWidth, clause)));

    std::optional<SVInt> svCounterexample;
    if (expectedCounterexample) {
        svCounterexample = SVInt::fromString(
            fmt::format("{}'b{}", bitWidth, *expectedCounterexample));
    }

    CaseDecisionDag dag(svClauses, bitWidth, wildcardX, 8192);

    CHECK(dag.gaveUp == expectGaveUp);
    if (dag.gaveUp)
        return;

    CHECK(dag.unreachableClauses == expectedUnreachable);
    CHECK(dag.counterexample == svCounterexample);
    CHECK(dag.overlappingClauses == expectedOverlaps);
}

TEST_CASE("Case Dag Exhaustiveness") {
    testDag({"1?", "00", "01"}, 2);
    testDag({"???"}, 3);
    testDag({"11?", "10?", "01?", "00?"}, 3);
}

TEST_CASE("Case Dag Non-exhaustive") {
    testDag({"11", "00"}, 2, {}, "01"); // Expects 01 because '0' branch is explored first
    testDag({"101"}, 3, {}, "000");     // Expects 000 first
    testDag({}, 3, {}, "000");
}

TEST_CASE("Case Dag Unreachable Clauses") {
    testDag({"1??", "11?", "0??"}, 3, {1});
    testDag({"11?", "1??", "0??"}, 3, {}, {}, {{0, 1}}); // Clause 1 is NOT redundant
    testDag({"???", "1??", "?0?", "111"}, 3, {1, 2, 3});
    testDag({"10", "01"}, 2, {}, "0");
}

TEST_CASE("Case Dag Overlapping Clauses") {
    testDag({"1??", "?1?"}, 3, {}, "0", {{0, 1}});         // Overlap on 11?
    testDag({"1??", "11?", "?1?"}, 3, {1}, "0", {{0, 2}}); // 1 is redundant, 0 overlaps 2 (on 11?)
    testDag({"10?", "01?"}, 3, {}, "000", {});
}

TEST_CASE("Case Dag Empty Cases") {
    testDag({}, 1, {}, "0");
    testDag({"0"}, 1, {}, "1");
    testDag({"1"}, 1, {}, "0");
}

TEST_CASE("Case Dag Large List 1") {
    testDag({"1???????????????????????????????????????????????????????????????",
             "01??????????????????????????????????????????????????????????????",
             "001?????????????????????????????????????????????????????????????",
             "0001????????????????????????????????????????????????????????????",
             "00001???????????????????????????????????????????????????????????",
             "000001??????????????????????????????????????????????????????????",
             "0000001?????????????????????????????????????????????????????????",
             "00000001????????????????????????????????????????????????????????",
             "000000001???????????????????????????????????????????????????????",
             "0000000001??????????????????????????????????????????????????????",
             "00000000001?????????????????????????????????????????????????????",
             "000000000001????????????????????????????????????????????????????",
             "0000000000001???????????????????????????????????????????????????",
             "00000000000001??????????????????????????????????????????????????",
             "000000000000001?????????????????????????????????????????????????",
             "0000000000000001????????????????????????????????????????????????",
             "00000000000000001???????????????????????????????????????????????",
             "000000000000000001??????????????????????????????????????????????",
             "0000000000000000001?????????????????????????????????????????????",
             "00000000000000000001????????????????????????????????????????????",
             "000000000000000000001???????????????????????????????????????????",
             "0000000000000000000001??????????????????????????????????????????",
             "00000000000000000000001?????????????????????????????????????????",
             "000000000000000000000001????????????????????????????????????????",
             "0000000000000000000000001???????????????????????????????????????",
             "00000000000000000000000001??????????????????????????????????????",
             "000000000000000000000000001?????????????????????????????????????",
             "0000000000000000000000000001????????????????????????????????????",
             "00000000000000000000000000001???????????????????????????????????",
             "000000000000000000000000000001??????????????????????????????????",
             "0000000000000000000000000000001?????????????????????????????????",
             "00000000000000000000000000000001????????????????????????????????",
             "000000000000000000000000000000001???????????????????????????????",
             "0000000000000000000000000000000001??????????????????????????????",
             "00000000000000000000000000000000001?????????????????????????????",
             "000000000000000000000000000000000001????????????????????????????",
             "0000000000000000000000000000000000001???????????????????????????",
             "00000000000000000000000000000000000001??????????????????????????",
             "000000000000000000000000000000000000001?????????????????????????",
             "0000000000000000000000000000000000000001????????????????????????",
             "00000000000000000000000000000000000000001???????????????????????",
             "000000000000000000000000000000000000000001??????????????????????",
             "0000000000000000000000000000000000000000001?????????????????????",
             "00000000000000000000000000000000000000000001????????????????????",
             "000000000000000000000000000000000000000000001???????????????????",
             "0000000000000000000000000000000000000000000001??????????????????",
             "00000000000000000000000000000000000000000000001?????????????????",
             "000000000000000000000000000000000000000000000001????????????????",
             "0000000000000000000000000000000000000000000000001???????????????",
             "00000000000000000000000000000000000000000000000001??????????????",
             "000000000000000000000000000000000000000000000000001?????????????",
             "0000000000000000000000000000000000000000000000000001????????????",
             "00000000000000000000000000000000000000000000000000001???????????",
             "000000000000000000000000000000000000000000000000000001??????????",
             "0000000000000000000000000000000000000000000000000000001?????????",
             "00000000000000000000000000000000000000000000000000000001????????",
             "000000000000000000000000000000000000000000000000000000001???????",
             "0000000000000000000000000000000000000000000000000000000001??????",
             "00000000000000000000000000000000000000000000000000000000001?????",
             "000000000000000000000000000000000000000000000000000000000001????",
             "0000000000000000000000000000000000000000000000000000000000001???",
             "00000000000000000000000000000000000000000000000000000000000001??",
             "000000000000000000000000000000000000000000000000000000000000001?",
             "0000000000000000000000000000000000000000000000000000000000000001",
             "0000000000000000000000000000000000000000000000000000000000000000"},
            64);
}

TEST_CASE("Case Dag Large List 2") {
    testDag(
        {
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx01",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx011",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx01111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx011111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx01111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx011111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx01111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx011111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx01111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx011111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0111111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx01111111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx011111111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0111111111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx01111111111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx011111111111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0111111111111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxx01111111111111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxx011111111111111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxx0111111111111111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxxx01111111111111111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxxx011111111111111111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxxx0111111111111111111111111111",
            "xxxxxxxxxxxxxxxxxxxxxxx01111111111111111111111111111",
            "xxxxxxxxxxxxxxxxxxxxxx011111111111111111111111111111",
            "xxxxxxxxxxxxxxxxxxxxx0111111111111111111111111111111",
            "xxxxxxxxxxxxxxxxxxxx01111111111111111111111111111111",
            "xxxxxxxxxxxxxxxxxxx011111111111111111111111111111111",
            "xxxxxxxxxxxxxxxxxx0111111111111111111111111111111111",
            "xxxxxxxxxxxxxxxxx01111111111111111111111111111111111",
            "xxxxxxxxxxxxxxxx011111111111111111111111111111111111",
            "xxxxxxxxxxxxxxx0111111111111111111111111111111111111",
            "xxxxxxxxxxxxxx01111111111111111111111111111111111111",
            "xxxxxxxxxxxxx011111111111111111111111111111111111111",
            "xxxxxxxxxxxx0111111111111111111111111111111111111111",
            "xxxxxxxxxxx01111111111111111111111111111111111111111",
            "xxxxxxxxxx011111111111111111111111111111111111111111",
            "xxxxxxxxx0111111111111111111111111111111111111111111",
            "xxxxxxxx01111111111111111111111111111111111111111111",
            "xxxxxxx011111111111111111111111111111111111111111111",
            "xxxxxx0111111111111111111111111111111111111111111111",
            "xxxxx01111111111111111111111111111111111111111111111",
            "xxxx011111111111111111111111111111111111111111111111",
            "xxx0111111111111111111111111111111111111111111111111",
            "xx01111111111111111111111111111111111111111111111111",
            "x011111111111111111111111111111111111111111111111111",
            "0111111111111111111111111111111111111111111111111111",
        },
        52, {}, "1111111111111111111111111111111111111111111111111111", {}, true);
}

TEST_CASE("Case Dag Hard Variant") {
    testDag(
        {
            "????0???????1?1?????", "????1???0???0???????", "?0??????0???0???????",
            "???????????????0?11?", "????10???????1??????", "???1??0???1?????????",
            "?????????????10???1?", "??0???????????????01", "????????0?0????????0",
            "?1???0???0??????????", "??1??0??????1???????", "???????01?1?????????",
            "??????1?0?????????0?", "???????????1????0??0", "???1???????????00???",
            "????0?0????????????1", "???0?????01?????????", "0???1???1???????????",
            "0???????????????1?1?", "00???0??????????????", "??????????????1?1?0?",
            "?????????????01??1??", "??????????????00??1?", "?????1????????00????",
            "??0?1??????????????0", "?????????0?????1???1", "?????00?????????1???",
            "?1????1????????0????", "????1???????1????0??", "???????????11???0???",
            "?????0?????0?0??????", "?0??????0????1??????", "??1??????????0??0???",
            "0????0???????????1??", "???????0?????1???0??", "??0???1???????????0?",
            "????0????????????0?0", "???????????1??1????1", "??1?1?????????1?????",
            "?????0?????????1?0??", "????1??1?????????0??", "???1?1????????0?????",
            "??11?1??????????????", "????????1?00????????", "????1???1??1????????",
            "???1???0?????????1??", "1??????0???????1????", "1?1???0?????????????",
            "???0????0?????1?????", "??0?0????0??????????", "???????????0???0??0?",
            "??0????????1???0????", "???1?0???????????0??", "??0?1?0?????????????",
            "0???0?????????1?????", "????????11?????0????", "????1???0???????1???",
            "?0?1?????1??????????", "????????1?0????1????", "1?????0???????0?????",
            "??1????0???????????0", "??1?????1???????1???", "?????1??1?0?????????",
            "???????1???????1??1?", "?10????1????????????", "????0?????????1??1??",
            "11?????????????1????", "????????0?0??????0??", "????1?1????0????????",
            "?????????0??0??????1", "1?????????1????????0", "?1??????????0?????1?",
            "??0???????????1?1???", "?0?1????????1???????", "????1??????1??????0?",
            "????0?1????0????????", "?1?0??????????????1?", "????0????1???0??????",
            "0????0?????0????????", "??????????0??????0?1", "???1?????????1?1????",
            "????1????0?1????????", "??1??0???1??????????", "??0?1?????????0?????",
            "0??????????10???????", "???????00??????????1", "?????0???0???????1??",
            "???????????1???1?0??", "?0???????????01?????", "??1??????1????????1?",
            "????????????1?1????1", "????????????????????", "????????????????????",
        },
        20, {}, {}, {}, false, true);
}
