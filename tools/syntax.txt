ExpressionSyntax final=false
empty

// ----- ARGUMENTS -----

ArgumentSyntax final=false
empty

OrderedArgumentSyntax base=ArgumentSyntax kind=OrderedArgument
ExpressionSyntax expr

NamedArgumentSyntax base=ArgumentSyntax kind=NamedArgument
token dot
token name
token openParen
ExpressionSyntax expr
token closeParen

ArgumentListSyntax kind=ArgumentList
token openParen
separated_list<ArgumentSyntax> parameters
token closeParen

ParameterValueAssignmentSyntax kind=ParameterValueAssignment
token hash
ArgumentListSyntax parameters

// ----- EXPRESSIONS -----

PrefixUnaryExpressionSyntax base=ExpressionSyntax
token operatorToken
ExpressionSyntax operand

PostfixUnaryExpressionSyntax base=ExpressionSyntax
ExpressionSyntax operand
token operatorToken

BinaryExpressionSyntax base=ExpressionSyntax
ExpressionSyntax left
token operatorToken
ExpressionSyntax right

MinTypMaxExpressionSyntax base=ExpressionSyntax kind=MinTypMaxExpression
ExpressionSyntax min
token colon1
ExpressionSyntax typ
token colon2
ExpressionSyntax max

TaggedUnionExpressionSyntax base=ExpressionSyntax kind=TaggedUnionExpression
token tagged
token member
ExpressionSyntax expr

InsideExpressionSyntax base=ExpressionSyntax kind=InsideExpression
ExpressionSyntax expr
token inside
token openBrace
separated_list<ExpressionSyntax> valueRanges
token closeBrace

// ----- SELECTORS -----
SelectorSyntax final=false
empty

BitSelectSyntax base=SelectorSyntax kind=BitSelect
ExpressionSyntax expr

RangeSelectSyntax base=SelectorSyntax
ExpressionSyntax left
token range
ExpressionSyntax right

ElementSelectSyntax base=ExpressionSyntax kind=ElementSelect
token openBracket
SelectorSyntax selector
token closeBracket

// ----- PRIMARY EXPRESSIONS -----

PrimaryExpressionSyntax base=ExpressionSyntax
empty

LiteralExpressionSyntax base=PrimaryExpressionSyntax
token literal

EmptyQueueExpressionSyntax base=PrimaryExpressionSyntax kind=EmptyQueueExpression
token openBrace
token closeBrace

ConcatenationExpressionSyntax base=PrimaryExpressionSyntax kind=ConcatenationExpression
token openBrace
separated_list<ExpressionSyntax> expressions
token closeBrace

MultipleConcatenationExpressionSyntax base=PrimaryExpressionSyntax kind=MultipleConcatenationExpression
token openBrace
ExpressionSyntax expression
ConcatenationExpressionSyntax concatenation
token closeBrace

StreamExpressionWithRange kind=StreamExpressionWithRange
token withKeyword
ElementSelectSyntax range

StreamExpressionSyntax kind=StreamExpression
ExpressionSyntax expression
StreamExpressionWithRange withRange

StreamingConcatenationExpressionSyntax base=PrimaryExpressionSyntax kind=StreamingConcatenationExpression
token openBrace
token operatorToken
ExpressionSyntax sliceSize
token innerOpenBrace
separated_list<StreamExpressionSyntax> expressions
token innerCloseBrace
token closeBrace

ParenthesizedExpressionSyntax base=PrimaryExpressionSyntax kind=ParenthesizedExpression
token openParen
ExpressionSyntax expression
token closeParen

// ----- NAMES -----

NameSyntax base=ExpressionSyntax final=false
empty

IdentifierNameSyntax base=NameSyntax kind=IdentifierName
token identifier

KeywordNameSyntax base=NameSyntax
token keyword

ClassNameSyntax base=NameSyntax kind=ClassName
token identifier
ParameterValueAssignmentSyntax parameters

ScopedNameSyntax base=NameSyntax kind=ScopedName
NameSyntax left
token separator
NameSyntax right

// ----- POSTFIX EXPRESSIONS

ElementSelectExpressionSyntax base=ExpressionSyntax kind=ElementSelectExpression
ExpressionSyntax left
ElementSelectSyntax select

MemberAccessExpressionSyntax base=ExpressionSyntax kind=MemberAccessExpression
ExpressionSyntax left
token dot
token name

InvocationExpressionSyntax base=ExpressionSyntax kind=InvocationExpression
ExpressionSyntax left
ArgumentListSyntax arguments

// ----- DIRECTIVES -----

DirectiveSyntax final=false
token directive
token endOfDirective

IncludeDirectiveSyntax base=DirectiveSyntax kind=IncludeDirective
token fileName

MacroArgumentDefaultSyntax kind=MacroArgumentDefault
token equals
tokenlist tokens

MacroFormalArgumentSyntax kind=MacroFormalArgument
token name
MacroArgumentDefaultSyntax defaultValue

MacroFormalArgumentListSyntax kind=MacroFormalArgumentList
token openParen
separated_list<MacroFormalArgumentSyntax> args
token closeParen

DefineDirectiveSyntax base=DirectiveSyntax kind=DefineDirective
token name
MacroFormalArgumentListSyntax formalArguments
tokenlist body