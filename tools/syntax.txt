ExpressionSyntax final=false
empty

DataTypeSyntax final=false
empty

// ----- ATTRIBUTES -----

EqualsValueClauseSyntax kind=EqualsValueClause
token equals
ExpressionSyntax expr

AttributeSpecSyntax kind=AttributeSpec
token name
EqualsValueClauseSyntax value

AttributeInstanceSyntax kind=AttributeInstance
token openParen
separated_list<AttributeSpecSyntax> specs
token closeParen

StatementLabelSyntax kind=StatementLabel
token name
token colon

StatementSyntax final=false
StatementLabelSyntax label
list<AttributeInstanceSyntax> attributes

// ----- ARGUMENTS -----

ArgumentSyntax final=false
empty

OrderedArgumentSyntax base=ArgumentSyntax kind=OrderedArgument
ExpressionSyntax expr

NamedArgumentSyntax base=ArgumentSyntax kind=NamedArgument
token dot
token name
token openParen
ExpressionSyntax expr
token closeParen

ArgumentListSyntax kind=ArgumentList
token openParen
separated_list<ArgumentSyntax> parameters
token closeParen

ParameterValueAssignmentSyntax kind=ParameterValueAssignment
token hash
ArgumentListSyntax parameters

// ----- PATTERNS -----

PatternSyntax final=false
empty

VariablePatternSyntax base=PatternSyntax kind=VariablePattern
token dot
token variableName

WildcardPatternSyntax base=PatternSyntax kind=WildcardPattern
token dotStar

ExpressionPatternSyntax base=PatternSyntax kind=ExpressionPattern
ExpressionSyntax expr

TaggedPatternSyntax base=PatternSyntax kind=TaggedPattern
token tagged
token memberName
PatternSyntax pattern

StructurePatternMemberSyntax final=false
empty

OrderedStructurePatternMemberSyntax base=StructurePatternMemberSyntax kind=OrderedStructurePatternMember
PatternSyntax pattern

NamedStructurePatternMemberSyntax base=StructurePatternMemberSyntax kind=NamedStructurePatternMember
token name
token colon
PatternSyntax pattern

StructurePatternSyntax base=PatternSyntax kind=StructurePattern
token openBrace
separated_list<StructurePatternMemberSyntax> members
token closeBrace

MatchesClauseSyntax kind=MatchesClause
token matchesKeyword
PatternSyntax pattern

ConditionalPatternSyntax kind=ConditionalPattern
ExpressionSyntax expr
MatchesClauseSyntax matchesClause

ConditionalPredicateSyntax kind=ConditionalPredicate
separated_list<ConditionalPatternSyntax> conditions

// ----- EXPRESSIONS -----

PrefixUnaryExpressionSyntax base=ExpressionSyntax
token operatorToken
list<AttributeInstanceSyntax> attributes
ExpressionSyntax operand

PostfixUnaryExpressionSyntax base=ExpressionSyntax
ExpressionSyntax operand
list<AttributeInstanceSyntax> attributes
token operatorToken

BinaryExpressionSyntax base=ExpressionSyntax
ExpressionSyntax left
token operatorToken
list<AttributeInstanceSyntax> attributes
ExpressionSyntax right

MinTypMaxExpressionSyntax base=ExpressionSyntax kind=MinTypMaxExpression
ExpressionSyntax min
token colon1
ExpressionSyntax typ
token colon2
ExpressionSyntax max

TaggedUnionExpressionSyntax base=ExpressionSyntax kind=TaggedUnionExpression
token tagged
token member
ExpressionSyntax expr

InsideExpressionSyntax base=ExpressionSyntax kind=InsideExpression
ExpressionSyntax expr
token inside
token openBrace
separated_list<ExpressionSyntax> valueRanges
token closeBrace

ConditionalExpressionSyntax base=ExpressionSyntax kind=ConditionalExpression
ConditionalPredicateSyntax predicate
token question
list<AttributeInstanceSyntax> attributes
ExpressionSyntax left
token colon
ExpressionSyntax right

// ----- SELECTORS -----

SelectorSyntax final=false
empty

BitSelectSyntax base=SelectorSyntax kind=BitSelect
ExpressionSyntax expr

RangeSelectSyntax base=SelectorSyntax
ExpressionSyntax left
token range
ExpressionSyntax right

ElementSelectSyntax base=ExpressionSyntax kind=ElementSelect
token openBracket
SelectorSyntax selector
token closeBracket

// ----- NAMES -----

NameSyntax base=ExpressionSyntax final=false
empty

IdentifierNameSyntax base=NameSyntax kind=IdentifierName
token identifier

IdentifierSelectNameSyntax base=NameSyntax kind=IdentifierSelectName
token identifier
list<ElementSelectSyntax> selectors

KeywordNameSyntax base=NameSyntax
token keyword

ClassNameSyntax base=NameSyntax kind=ClassName
token identifier
ParameterValueAssignmentSyntax parameters

ScopedNameSyntax base=NameSyntax kind=ScopedName
NameSyntax left
token separator
NameSyntax right

ClassScopeSyntax kind=ClassScope
NameSyntax left
token separator

// ----- PRIMARY EXPRESSIONS -----

PrimaryExpressionSyntax base=ExpressionSyntax
empty

LiteralExpressionSyntax base=PrimaryExpressionSyntax
token literal

EmptyQueueExpressionSyntax base=PrimaryExpressionSyntax kind=EmptyQueueExpression
token openBrace
token closeBrace

ConcatenationExpressionSyntax base=PrimaryExpressionSyntax kind=ConcatenationExpression
token openBrace
separated_list<ExpressionSyntax> expressions
token closeBrace

MultipleConcatenationExpressionSyntax base=PrimaryExpressionSyntax kind=MultipleConcatenationExpression
token openBrace
ExpressionSyntax expression
ConcatenationExpressionSyntax concatenation
token closeBrace

StreamExpressionWithRange kind=StreamExpressionWithRange
token withKeyword
ElementSelectSyntax range

StreamExpressionSyntax kind=StreamExpression
ExpressionSyntax expression
StreamExpressionWithRange withRange

StreamingConcatenationExpressionSyntax base=PrimaryExpressionSyntax kind=StreamingConcatenationExpression
token openBrace
token operatorToken
ExpressionSyntax sliceSize
token innerOpenBrace
separated_list<StreamExpressionSyntax> expressions
token innerCloseBrace
token closeBrace

ParenthesizedExpressionSyntax base=PrimaryExpressionSyntax kind=ParenthesizedExpression
token openParen
ExpressionSyntax expression
token closeParen

NewClassExpressionSyntax base=ExpressionSyntax kind=NewClassExpression
ClassScopeSyntax classScope
token newKeyword
ArgumentListSyntax arguments

NewArrayExpressionSyntax base=ExpressionSyntax kind=NewArrayExpression
token newKeyword
token openBracket
ExpressionSyntax sizeExpr
token closeBracket
ParenthesizedExpressionSyntax initializer

// ----- POSTFIX EXPRESSIONS -----

ElementSelectExpressionSyntax base=ExpressionSyntax kind=ElementSelectExpression
ExpressionSyntax left
ElementSelectSyntax select

MemberAccessExpressionSyntax base=ExpressionSyntax kind=MemberAccessExpression
ExpressionSyntax left
token dot
token name

InvocationExpressionSyntax base=ExpressionSyntax kind=InvocationExpression
ExpressionSyntax left
list<AttributeInstanceSyntax> attributes
ArgumentListSyntax arguments

// ----- TIMING CONTROL -----

TimingControlSyntax final=false
empty

DelayControlSyntax base=TimingControlSyntax kind=DelayControl
token hash
ExpressionSyntax delayValue

CycleDelaySyntax base=TimingControlSyntax kind=CycleDelay
token doubleHash
ExpressionSyntax delayValue

EventControlSyntax base=TimingControlSyntax kind=EventControl
token at
NameSyntax eventName

EventExpressionSyntax final=false
empty

IffClauseSyntax kind=IffClause
token iff
ExpressionSyntax expr

SignalEventExpressionSyntax base=EventExpressionSyntax kind=SignalEventExpression
token edge
ExpressionSyntax expr
IffClauseSyntax iffClause

BinaryEventExpressionSyntax base=EventExpressionSyntax kind=BinaryEventExpression
EventExpressionSyntax left
token operatorToken
EventExpressionSyntax right

ParenthesizedEventExpressionSyntax base=EventExpressionSyntax kind=ParenthesizedEventExpression
token openParen
EventExpressionSyntax expr
token closeParen

ImplicitEventControlSyntax base=TimingControlSyntax kind=ImplicitEventControl
token atStar

ParenImplicitEventControlSyntax base=TimingControlSyntax kind=ParenImplicitEventControl
token at
token openParenStarCloseParen

EventControlWithExpressionSyntax base=TimingControlSyntax kind=EventControlWithExpression
token at
EventExpressionSyntax expr

RepeatedEventControlSyntax base=TimingControlSyntax kind=RepeatedEventControl
token repeat
token openParen
ExpressionSyntax expr
token closeParen
TimingControlSyntax eventControl

// ----- DECLARATIONS -----

DimensionSpecifierSyntax final=false
empty

RangeDimensionSpecifierSyntax base=DimensionSpecifierSyntax kind=RangeDimensionSpecifier
ExpressionSyntax left
token colon
ExpressionSyntax right

ExpressionDimensionSpecifierSyntax base=DimensionSpecifierSyntax kind=ExpressionDimensionSpecifier
ExpressionSyntax expr

DataTypeDimensionSpecifierSyntax base=DimensionSpecifierSyntax kind=DataTypeDimensionSpecifier
DataTypeSyntax type

WildcardDimensionSpecifierSyntax base=DimensionSpecifierSyntax kind=WildcardDimensionSpecifier
token star

ColonExpressionClauseSyntax kind=ColonExpressionClause
token colon
ExpressionSyntax expr

QueueDimensionSpecifierSyntax base=DimensionSpecifierSyntax kind=QueueDimensionSpecifier
token dollar
ColonExpressionClauseSyntax maxSizeClause

VariableDimensionSyntax kind=VariableDimension
token openBracket
DimensionSpecifierSyntax specifier
token closeBracket

VariableDeclaratorSyntax kind=VariableDeclarator
token name
list<VariableDimensionSyntax> dimensions
EqualsValueClauseSyntax initializer

DataDeclarationSyntax base=StatementSyntax kind=DataDeclaration
tokenlist modifiers
DataTypeSyntax type
separated_list<VariableDeclaratorSyntax> declarators
token semi

// ----- TYPES -----

IntegerTypeSyntax base=DataTypeSyntax
token keyword
token signing
list<VariableDimensionSyntax> dimensions

KeywordTypeSyntax base=DataTypeSyntax
token keyword

NamedTypeSyntax base=DataTypeSyntax kind=NamedType
NameSyntax name

StructUnionMemberSyntax kind=StructUnionMember
token randomQualifier
DataTypeSyntax type
list<VariableDeclaratorSyntax> declarators
token semi

StructUnionTypeSyntax base=DataTypeSyntax
token keyword
token tagged
token packed
token signing
token openBrace
list<StructUnionMemberSyntax> members
token closeBrace
list<VariableDimensionSyntax> dimensions

EnumNameDeclarationSyntax kind=EnumNameDeclaration
token name
VariableDimensionSyntax dimension
EqualsValueClauseSyntax initializer

EnumTypeSyntax base=DataTypeSyntax kind=EnumType
token keyword
DataTypeSyntax baseType
token openBrace
list<EnumNameDeclarationSyntax> members
token closeBrace
list<VariableDimensionSyntax> dimensions

ExpressionTypeReferenceSyntax base=DataTypeSyntax kind=ExpressionTypeReference
token typeKeyword
token openParen
ExpressionSyntax expr
token closeParen

DataTypeReferenceSyntax base=DataTypeSyntax kind=DataTypeReference
token typeKeyword
token openParen
DataTypeSyntax type
token closeParen

DotMemberClauseSyntax kind=DotMemberClause
token dot
token member

VirtualInterfaceTypeSyntax base=DataTypeSyntax kind=VirtualInterfaceType
token virtualKeyword
token interfaceKeyword
token name
ParameterValueAssignmentSyntax parameters
DotMemberClauseSyntax modport

ImplicitTypeSyntax kind=DataTypeSyntax kind=ImplicitType
token signing
list<VariableDimensionSyntax> dimensions

// ----- STATEMENTS -----

EmptyStatementSyntax base=StatementSyntax kind=EmptyStatement
token semicolon

ElseClauseSyntax kind=ElseClause
token elseKeyword
StatementSyntax statement

ConditionalStatementSyntax base=StatementSyntax kind=ConditionalStatement
token uniqueOrPriority
token ifKeyword
token openParen
ConditionalPredicateSyntax predicate
token closeParen
StatementSyntax statement
ElseClauseSyntax elseClause

CaseItemSyntax final=false
empty

DefaultCaseItemSyntax base=CaseItemSyntax kind=DefaultCaseItem
token defaultKeyword
token colon
StatementSyntax statement

PatternCaseItemSyntax base=CaseItemSyntax kind=PatternCaseItem
PatternSyntax pattern
token tripleAnd
ExpressionSyntax expr
token colon
StatementSyntax statement

StandardCaseItemSyntax base=CaseItemSyntax kind=StandardCaseItem
separated_list<ExpressionSyntax> expressions
token colon
StatementSyntax statement

CaseStatementSyntax base=StatementSyntax kind=CaseStatement
token uniqueOrPriority
token caseKeyword
token openParen
ExpressionSyntax expr
token closeParen
token matchesOrInside
list<CaseItemSyntax> items
token endcase

ForeverStatementSyntax base=StatementSyntax kind=ForeverStatement
token foreverKeyword
StatementSyntax statement

LoopStatementSyntax base=StatementSyntax kind=LoopStatement
token repeatOrWhile
token openParen
ExpressionSyntax expr
token closeParen
StatementSyntax statement

DoWhileStatementSyntax base=StatementSyntax kind=DoWhileStatement
token doKeyword
StatementSyntax statement
token whileKeyword
token openParen
ExpressionSyntax expr
token closeParen
token semi

ReturnStatementSyntax base=StatementSyntax kind=ReturnStatement
token returnKeyword
ExpressionSyntax returnValue
token semi

JumpStatementSyntax base=StatementSyntax kind=JumpStatement
token breakOrContinue
token semi

TimingControlStatementSyntax base=StatementSyntax kind=TimingControlStatement
TimingControlSyntax timingControl
StatementSyntax statement

AssignmentStatementSyntax base=StatementSyntax
ExpressionSyntax left
token operatorToken
TimingControlSyntax timingControl
ExpressionSyntax expr
token semi

ProceduralAssignStatementSyntax base=StatementSyntax
token keyword
ExpressionSyntax lvalue
token equals
ExpressionSyntax value
token semi

ProceduralDeassignStatementSyntax base=StatementSyntax
token keyword
ExpressionSyntax variable
token semi

DisableStatementSyntax base=StatementSyntax kind=DisableStatement
token disable
NameSyntax name
token semi

DisableForkStatementSyntax base=StatementSyntax kind=DisableForkStatement
token disable
token fork
token semi

NamedBlockClauseSyntax kind=NamedBlockClause
token colon
token name

SequentialBlockStatementSyntax base=StatementSyntax kind=SequentialBlockStatement
token begin
NamedBlockClauseSyntax blockName
list<StatementSyntax> items
token end
NamedBlockClauseSyntax endBlockName

// ----- MODULES -----

PortListSyntax final=false
empty

NonAnsiPortSyntax final=false
empty

ImplicitNonAnsiPortSyntax base=NonAnsiPortSyntax kind=ImplicitNonAnsiPort
ExpressionSyntax expr

ExplicitNonAnsiPortSyntax base=NonAnsiPortSyntax kind=ExplicitNonAnsiPort
token dot
token name
token openParen
ExpressionSyntax expr
token closeParen

NonAnsiPortListSyntax base=PortListSyntax kind=NonAnsiPortList
token openParen
separated_list<NonAnsiPortSyntax> ports
token closeParen

AnsiPortSyntax final=false
list<AttributeInstanceSyntax> attributes

PortHeaderSyntax final=false
empty

InterfacePortHeaderSyntax base=PortHeaderSyntax kind=InterfacePortHeader
token nameOrKeyword
DotMemberClauseSyntax modport

VariablePortHeaderSyntax base=PortHeaderSyntax kind=VariablePortHeader
token direction
token varKeyword
DataTypeSyntax type

InterconnectPortHeaderSyntax base=PortHeaderSyntax kind=InterconnectPortHeader
token direction
token interconnect
DataTypeSyntax type

NetPortHeaderSyntax base=PortHeaderSyntax kind=NetPortHeader
token direction
token netType
DataTypeSyntax dataType

ImplicitAnsiPortSyntax base=AnsiPortSyntax kind=ImplicitAnsiPort
PortHeaderSyntax header
token name
list<VariableDimensionSyntax> dimensions
EqualsValueClauseSyntax defaultValue

ExplicitAnsiPortSyntax base=AnsiPortSyntax kind=ExplicitAnsiPort
token direction
token dot
token name
token openParen
ExpressionSyntax expr
token closeParen

AnsiPortListSyntax base=PortListSyntax kind=AnsiPortList
token openParen
separated_list<AnsiPortSyntax> ports
token closeParen

WildcardPortListSyntax base=PortListSyntax kind=WildcardPortList
token openParen
token dotStar
token closeParen

ModuleHeaderSyntax kind=ModuleHeader
list<AttributeInstanceSyntax> attributes
token moduleKeyword
token lifetime
token name
//list<PackageImportDeclarationSyntax> imports
//ParameterPortListSyntax parameters
PortListSyntax ports
token semi

ModuleDeclarationSyntax kind=ModuleDeclaration
ModuleHeaderSyntax header
token endmodule
NamedBlockClauseSyntax blockName

ExternModuleSyntax kind=ExternModule
token externKeyword
ModuleHeaderSyntax header

// ----- DIRECTIVES -----

DirectiveSyntax final=false
token directive
token endOfDirective

IncludeDirectiveSyntax base=DirectiveSyntax kind=IncludeDirective
token fileName

MacroArgumentDefaultSyntax kind=MacroArgumentDefault
token equals
tokenlist tokens

MacroFormalArgumentSyntax kind=MacroFormalArgument
token name
MacroArgumentDefaultSyntax defaultValue

MacroFormalArgumentListSyntax kind=MacroFormalArgumentList
token openParen
separated_list<MacroFormalArgumentSyntax> args
token closeParen

DefineDirectiveSyntax base=DirectiveSyntax kind=DefineDirective
token name
MacroFormalArgumentListSyntax formalArguments
tokenlist body