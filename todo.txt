[Lexer]
* Perfect keyword hashing
* Stop lexing if too many errors
* Start of line check for directives
* Test escaped identifiers are not keywords

[Preprocessor]
* Different keyword sets
* Finish macros
* Pragmas
* Other directives
* Controlling macros on includes
* Macro replace include file

[Parser]
* Stack overflow prevention
* Give syntax nodes a Kind for as<> casting

[parsing]
* Param expressions
* Type reference expression
* Assignment patterns

* Sequence instances / methods
* Fill in unary operators
* Commas in parenthesis for sequence concat
* Sequence if / case
* Expression or dist
* Procedural context
* Top level deferred assertions
* Sequence / property declarations
* Sequence postfix

When skipping to an end keyword, break out if we encounter some other kind of end
Include and macro directives should come *after* the stuff they insert into the stream
Diagnostics should load from file and have customizable displayers

FILE and LINE macros
Error on recursive macros
Mark tokens from arguments as being ok to "recursively" expand
Warn on redefining macros
Include directive macros
Macros that have other directives in their bodies?




Compilation Flow
================
- Create and initialize a SourceManager
- In parallel:
    - Parse each source file into a SyntaxTree
    - For each compilation unit determine the following:
        - The set of modules in the root name space
        - Which of those modules are referenced
        - A set of references to unknown modules
        - Errors for conflicting module names
        - Whether there are defparams
- Join the set of root modules, find which ones are unreferenced
    - Error on conflicting names
- For top-level (unreferenced) modules:
    - Evaluate all parameters (error if top-level doesn't have param value and no defparams)
    - If no defparams, do type checking and bind all statements
    - Descend into the hierachy building a tree of instances
        - If we have defparams, skip generates
- If we have defparams, evaluate them now
    - Re-run through and re-evaluate all parameters
    - Make sure all top-levels have fully defined parameters
    - Evaluate generates
    - Do type checking and bind all statements

At this point we know the hierarchy and all final parameter values and
all generate blocks have been evaluated.