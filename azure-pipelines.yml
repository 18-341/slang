# Build script for continuous integration builds with Azure Pipelines

strategy:
  matrix:
    gcc:
      imageName: 'ubuntu-16.04'
      compiler: g++-8
      flags: '-DCMAKE_BUILD_TYPE=Release'
    clang:
      imageName: 'ubuntu-16.04'
      compiler: clang++-8
      flags: '-DCMAKE_BUILD_TYPE=Debug -DSLANG_COVERAGE=ON -DSLANG_SANITIZERS=undefined,address "-DCMAKE_CXX_CLANG_TIDY=/usr/lib/llvm-8/bin/clang-tidy;-quiet;-checks=-*,clang-analyzer-*,bugprone-*,performance-*,modernize-*,-modernize-use-auto,-modernize-raw-string-literal,-bugprone-suspicious-semicolon,-clang-analyzer-cplusplus.NewDelete*,-clang-analyzer-cplusplus.InnerPointer,misc-*,-misc-non-private-member-variables-in-classes,-modernize-avoid-c-arrays"'
    msvc:
      imageName: 'windows-2019'

pool:
  vmImage: $(imageName)

steps:
- task: UsePythonVersion@0

- script: |
    wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
    sudo apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-8 main" -y
    sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
    sudo apt-get update
    sudo apt-get install -y gcc-8 g++-8 clang-8 clang-tidy-8
  displayName: 'Install GCC and Clang'
  condition: eq(variables['Agent.OS'], 'Linux')

- script: |
    export PATH="$HOME/.local/bin:$PATH"
    sudo apt-get install -y python3-setuptools python3-pip
    pip3 install wheel
    pip3 install conan
    conan user
    conan --version
  displayName: 'Install Conan (Linux)'
  condition: eq(variables['Agent.OS'], 'Linux')

- script: |
    pip install conan
    conan user
    conan --version
  displayName: 'Install Conan (Windows)'
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- script: |
    mkdir build
    cd build
    cmake -DCMAKE_CXX_COMPILER=$(compiler) -DCI_BUILD=ON $(flags) ..
    make -j 8
  displayName: 'Build (Linux)'
  condition: eq(variables['Agent.OS'], 'Linux')

- script: |
    mkdir build
    cd build
    cmake -G "Visual Studio 16 2019" -A x64 ..
  displayName: 'Generate VS Solution'
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- task: VSBuild@1
  inputs:
    solution: build/slang.sln
    platform: x64
    configuration: Release
    maximumCpuCount: true
  displayName: 'Build (Windows)'
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- script: |
    export LLVM_PROFILE_FILE=%p.profraw
    cd build
    ctest --output-on-failure
  displayName: 'Run tests (Linux)'
  condition: eq(variables['Agent.OS'], 'Linux')

- script: |
    cd build
    ctest -C Release --output-on-failure
  displayName: 'Run tests (Windows)'
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- script: |
    cd build
    find . -name *.profraw -exec llvm-profdata-8 merge -o merged.profdata -sparse {} + ;
    llvm-cov-8 show bin/unittests -instr-profile=merged.profdata > coverage.txt
    bash <(curl -s https://codecov.io/bash) -t $(CODECOV_TOKEN) || echo 'Codecov failed to upload'
  displayName: 'Upload code coverage'
  condition: eq(variables['compiler'], 'clang++-8')