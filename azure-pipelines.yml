# Build script for continuous integration builds with Azure Pipelines

jobs:
- job: Build
  strategy:
    matrix:
      gcc:
        imageName: 'ubuntu-18.04'
        compiler: g++-9
        flags: '-DCMAKE_BUILD_TYPE=Release'
        isLinux: true
        isGCC: true
      clang:
        imageName: 'ubuntu-18.04'
        compiler: clang++-9
        flags: '-DCMAKE_BUILD_TYPE=Debug -DSLANG_COVERAGE=ON -DSLANG_SANITIZERS=undefined,address "-DCMAKE_CXX_CLANG_TIDY=/usr/lib/llvm-9/bin/clang-tidy;-quiet;-checks=-*,clang-analyzer-*,bugprone-*,performance-*,modernize-*,-modernize-use-auto,-modernize-use-trailing-return-type,-modernize-raw-string-literal,-modernize-use-nodiscard,-bugprone-suspicious-semicolon,-bugprone-branch-clone,-bugprone-sizeof-expression,-clang-analyzer-cplusplus.NewDelete*,-clang-analyzer-cplusplus.InnerPointer,misc-*,-misc-non-private-member-variables-in-classes,-modernize-avoid-c-arrays"'
        isLinux: true
        isClang: true
      msvc:
        imageName: 'windows-2019'
        isWindows: true

  pool:
    vmImage: $(imageName)

  steps:
  - task: UsePythonVersion@0

  - script: |
      wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      sudo apt-add-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main" -y
      sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
      sudo apt-get update
      sudo apt-get install -y gcc-9 g++-9 clang-9 clang-tidy-9
    displayName: 'Install GCC and Clang'
    condition: variables.isLinux

  - script: |
      export PATH="$HOME/.local/bin:$PATH"
      sudo apt-get install -y python3-setuptools python3-pip
      pip3 install wheel
      pip3 install conan
      conan user
      conan --version
    displayName: 'Install Conan (Linux)'
    condition: variables.isLinux

  - script: |
      pip3 install conan
      conan user
      conan --version
    displayName: 'Install Conan (MacOS)'
    condition: variables.isMac

  - script: |
      pip install conan
      conan user
      conan --version
    displayName: 'Install Conan (Windows)'
    condition: variables.isWindows

  - script: |
      mkdir build
      cd build
      cmake -DCMAKE_CXX_COMPILER=$(compiler) -DCI_BUILD=ON $(flags) -DCMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/slang/ ..
      make install -j8
    displayName: 'Build (Linux)'
    condition: variables.isLinux

  - script: |
      mkdir build
      cd build
      cmake -G "Visual Studio 16 2019" -DCMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/slang/ ..
    displayName: 'Generate VS Solution'
    condition: variables.isWindows

  - task: VSBuild@1
    inputs:
      solution: build/INSTALL.vcxproj
      platform: x64
      configuration: Release
      maximumCpuCount: true
    displayName: 'Build (Windows)'
    condition: variables.isWindows

  - script: |
      mkdir build
      cd build
      cmake -G "Xcode" ..
      cmake --build .
    displayName: 'Build (MacOS)'
    condition: variables.isMac

  - script: |
      export LLVM_PROFILE_FILE=%p.profraw
      cd build
      ctest --output-on-failure
    displayName: 'Run tests (Linux)'
    condition: or(variables.isLinux, variables.isMac)

  - script: |
      cd build
      ctest -C Release --output-on-failure
    displayName: 'Run tests (Windows)'
    condition: variables.isWindows

  - script: |
      cd build
      find . -name *.profraw -exec llvm-profdata-9 merge -o merged.profdata -sparse {} + ;
      llvm-cov-9 show bin/unittests -instr-profile=merged.profdata > coverage.txt
      bash <(curl -s https://codecov.io/bash) -t $(CODECOV_TOKEN) || echo 'Codecov failed to upload'
    displayName: 'Upload code coverage'
    condition: variables.isClang

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(Build.StagingDirectory)/slang/
      archiveType: tar
      archiveFile: $(Build.StagingDirectory)/slang-linux.tar.gz
    displayName: Archive Linux Build
    condition: variables.isGCC

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(Build.StagingDirectory)/slang/
      archiveType: zip
      archiveFile: $(Build.StagingDirectory)/slang-windows.zip
    displayName: Archive Windows Build
    condition: variables.isWindows

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'SLANG_ARTIFACT_LINUX'
      targetPath: $(Build.StagingDirectory)/slang-linux.tar.gz
    displayName: Publish Linux Build
    condition: variables.isGCC

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'SLANG_ARTIFACT_WIN'
      targetPath: $(Build.StagingDirectory)/slang-windows.zip
    displayName: Publish Windows Build
    condition: variables.isWindows

- job: UpdateGithubRelease
  dependsOn: Build
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/azure-test')))

  steps:
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SLANG_ARTIFACT_LINUX'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SLANG_ARTIFACT_WIN'
      targetPath: $(Build.ArtifactStagingDirectory)

  - script: |
      git push --delete https://$(GITBUILD_TOKEN)@github.com/MikePopoloski/slang.git nightly
      git tag -d nightly
      git tag nightly
      git push https://$(GITBUILD_TOKEN)@github.com/MikePopoloski/slang.git nightly
    displayName: 'Retag nightly release'

  - task: GitHubRelease@0
    displayName: "Update Github Release"
    inputs:
      gitHubConnection: github.com_MikePopoloski
      repositoryName: MikePopoloski/slang
      action: edit
      title: Nightly
      tag: nightly
      releaseNotesFile: $(Build.SourcesDirectory)/scripts/nightly-release-notes.md
      target: '$(Build.SourceVersion)'
      assets: |
        $(Build.ArtifactStagingDirectory)/*.zip
        $(Build.ArtifactStagingDirectory)/*.tar.gz
      isPreRelease: true