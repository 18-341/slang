//------------------------------------------------------------------------------
// AllSyntax.cpp
// All generated syntax node data structures.
//
// File is under the MIT license; see LICENSE for details.
//------------------------------------------------------------------------------
#include "AllSyntax.h"

// This file contains all parse tree syntax node generated definitions.
// It is auto-generated by the syntax_gen.py script under the tools/ directory.

namespace slang {

uint32_t SyntaxNode::getChildCount() const {
    switch (kind) {
        case SyntaxKind::Unknown: return 0;
        case SyntaxKind::List: return ((const SyntaxListBase*)this)->getChildCount();
        case SyntaxKind::EqualsValueClause: return 2;
        case SyntaxKind::AttributeSpec: return 2;
        case SyntaxKind::AttributeInstance: return 3;
        case SyntaxKind::NamedLabel: return 2;
        case SyntaxKind::EmptyArgument: return 0;
        case SyntaxKind::OrderedArgument: return 1;
        case SyntaxKind::NamedArgument: return 5;
        case SyntaxKind::ArgumentList: return 3;
        case SyntaxKind::ParameterValueAssignment: return 2;
        case SyntaxKind::VariablePattern: return 2;
        case SyntaxKind::WildcardPattern: return 1;
        case SyntaxKind::ExpressionPattern: return 1;
        case SyntaxKind::TaggedPattern: return 3;
        case SyntaxKind::OrderedStructurePatternMember: return 1;
        case SyntaxKind::NamedStructurePatternMember: return 3;
        case SyntaxKind::StructurePattern: return 3;
        case SyntaxKind::MatchesClause: return 2;
        case SyntaxKind::ConditionalPattern: return 2;
        case SyntaxKind::ConditionalPredicate: return 1;
        case SyntaxKind::SimpleAssignmentPattern: return 3;
        case SyntaxKind::AssignmentPatternItem: return 3;
        case SyntaxKind::StructuredAssignmentPattern: return 3;
        case SyntaxKind::ReplicatedAssignmentPattern: return 6;
        case SyntaxKind::BadExpression: return 1;
        case SyntaxKind::UnaryPlusExpression: return 3;
        case SyntaxKind::UnaryMinusExpression: return 3;
        case SyntaxKind::UnaryBitwiseAndExpression: return 3;
        case SyntaxKind::UnaryBitwiseNandExpression: return 3;
        case SyntaxKind::UnaryBitwiseOrExpression: return 3;
        case SyntaxKind::UnaryBitwiseNorExpression: return 3;
        case SyntaxKind::UnaryBitwiseXorExpression: return 3;
        case SyntaxKind::UnaryBitwiseXnorExpression: return 3;
        case SyntaxKind::UnaryPreincrementExpression: return 3;
        case SyntaxKind::UnaryPredecrementExpression: return 3;
        case SyntaxKind::UnaryLogicalNotExpression: return 3;
        case SyntaxKind::UnaryBitwiseNotExpression: return 3;
        case SyntaxKind::UnarySequenceDelayExpression: return 3;
        case SyntaxKind::UnarySequenceEventExpression: return 3;
        case SyntaxKind::UnaryNotPropertyExpression: return 3;
        case SyntaxKind::AcceptOnPropertyExpression: return 3;
        case SyntaxKind::RejectOnPropertyExpression: return 3;
        case SyntaxKind::SyncAcceptOnPropertyExpression: return 3;
        case SyntaxKind::SyncRejectOnPropertyExpression: return 3;
        case SyntaxKind::NextTimePropertyExpression: return 3;
        case SyntaxKind::SNextTimePropertyExpression: return 3;
        case SyntaxKind::AlwaysPropertyExpression: return 3;
        case SyntaxKind::SAlwaysPropertyExpression: return 3;
        case SyntaxKind::EventuallyPropertyExpression: return 3;
        case SyntaxKind::SEventuallyPropertyExpression: return 3;
        case SyntaxKind::PostincrementExpression: return 3;
        case SyntaxKind::PostdecrementExpression: return 3;
        case SyntaxKind::AddExpression: return 4;
        case SyntaxKind::SubtractExpression: return 4;
        case SyntaxKind::MultiplyExpression: return 4;
        case SyntaxKind::DivideExpression: return 4;
        case SyntaxKind::PowerExpression: return 4;
        case SyntaxKind::ModExpression: return 4;
        case SyntaxKind::EqualityExpression: return 4;
        case SyntaxKind::InequalityExpression: return 4;
        case SyntaxKind::CaseEqualityExpression: return 4;
        case SyntaxKind::CaseInequalityExpression: return 4;
        case SyntaxKind::WildcardEqualityExpression: return 4;
        case SyntaxKind::WildcardInequalityExpression: return 4;
        case SyntaxKind::LessThanExpression: return 4;
        case SyntaxKind::LessThanEqualExpression: return 4;
        case SyntaxKind::GreaterThanExpression: return 4;
        case SyntaxKind::GreaterThanEqualExpression: return 4;
        case SyntaxKind::LogicalAndExpression: return 4;
        case SyntaxKind::LogicalOrExpression: return 4;
        case SyntaxKind::BinaryAndExpression: return 4;
        case SyntaxKind::BinaryOrExpression: return 4;
        case SyntaxKind::BinaryXorExpression: return 4;
        case SyntaxKind::BinaryXnorExpression: return 4;
        case SyntaxKind::LogicalImplicationExpression: return 4;
        case SyntaxKind::LogicalEquivalenceExpression: return 4;
        case SyntaxKind::LogicalShiftLeftExpression: return 4;
        case SyntaxKind::LogicalShiftRightExpression: return 4;
        case SyntaxKind::ArithmeticShiftLeftExpression: return 4;
        case SyntaxKind::ArithmeticShiftRightExpression: return 4;
        case SyntaxKind::BinarySequenceDelayExpression: return 4;
        case SyntaxKind::OrSequenceExpression: return 4;
        case SyntaxKind::AndSequenceExpression: return 4;
        case SyntaxKind::IntersectSequenceExpression: return 4;
        case SyntaxKind::WithinSequenceExpression: return 4;
        case SyntaxKind::ThroughoutSequenceExpression: return 4;
        case SyntaxKind::IffPropertyExpression: return 4;
        case SyntaxKind::UntilPropertyExpression: return 4;
        case SyntaxKind::SUntilPropertyExpression: return 4;
        case SyntaxKind::UntilWithPropertyExpression: return 4;
        case SyntaxKind::SUntilWithPropertyExpression: return 4;
        case SyntaxKind::ImpliesPropertyExpression: return 4;
        case SyntaxKind::OverlappedImplicationPropertyExpression: return 4;
        case SyntaxKind::NonOverlappedImplicationPropertyExpression: return 4;
        case SyntaxKind::OverlappedFollowedByPropertyExpression: return 4;
        case SyntaxKind::NonOverlappedFollowedByPropertyExpression: return 4;
        case SyntaxKind::AssignmentExpression: return 4;
        case SyntaxKind::AddAssignmentExpression: return 4;
        case SyntaxKind::SubtractAssignmentExpression: return 4;
        case SyntaxKind::MultiplyAssignmentExpression: return 4;
        case SyntaxKind::DivideAssignmentExpression: return 4;
        case SyntaxKind::ModAssignmentExpression: return 4;
        case SyntaxKind::AndAssignmentExpression: return 4;
        case SyntaxKind::OrAssignmentExpression: return 4;
        case SyntaxKind::XorAssignmentExpression: return 4;
        case SyntaxKind::LogicalLeftShiftAssignmentExpression: return 4;
        case SyntaxKind::LogicalRightShiftAssignmentExpression: return 4;
        case SyntaxKind::ArithmeticLeftShiftAssignmentExpression: return 4;
        case SyntaxKind::ArithmeticRightShiftAssignmentExpression: return 4;
        case SyntaxKind::NonblockingAssignmentExpression: return 4;
        case SyntaxKind::MinTypMaxExpression: return 5;
        case SyntaxKind::TaggedUnionExpression: return 3;
        case SyntaxKind::OpenRangeList: return 3;
        case SyntaxKind::InsideExpression: return 3;
        case SyntaxKind::ConditionalExpression: return 6;
        case SyntaxKind::AssignmentPatternExpression: return 2;
        case SyntaxKind::BitSelect: return 1;
        case SyntaxKind::SimpleRangeSelect: return 3;
        case SyntaxKind::AscendingRangeSelect: return 3;
        case SyntaxKind::DescendingRangeSelect: return 3;
        case SyntaxKind::ElementSelect: return 3;
        case SyntaxKind::IdentifierName: return 1;
        case SyntaxKind::IdentifierSelectName: return 2;
        case SyntaxKind::EmptyIdentifierName: return 0;
        case SyntaxKind::LocalScope: return 1;
        case SyntaxKind::UnitScope: return 1;
        case SyntaxKind::RootScope: return 1;
        case SyntaxKind::ThisHandle: return 1;
        case SyntaxKind::SuperHandle: return 1;
        case SyntaxKind::ArrayUniqueMethod: return 1;
        case SyntaxKind::ArrayAndMethod: return 1;
        case SyntaxKind::ArrayOrMethod: return 1;
        case SyntaxKind::ArrayXorMethod: return 1;
        case SyntaxKind::ConstructorName: return 1;
        case SyntaxKind::SystemName: return 1;
        case SyntaxKind::ClassName: return 2;
        case SyntaxKind::ScopedName: return 3;
        case SyntaxKind::ClassScope: return 2;
        case SyntaxKind::NullLiteralExpression: return 1;
        case SyntaxKind::StringLiteralExpression: return 1;
        case SyntaxKind::IntegerLiteralExpression: return 1;
        case SyntaxKind::UnbasedUnsizedLiteralExpression: return 1;
        case SyntaxKind::RealLiteralExpression: return 1;
        case SyntaxKind::TimeLiteralExpression: return 1;
        case SyntaxKind::WildcardLiteralExpression: return 1;
        case SyntaxKind::OneStepLiteralExpression: return 1;
        case SyntaxKind::DefaultPatternKeyExpression: return 1;
        case SyntaxKind::IntegerVectorExpression: return 3;
        case SyntaxKind::EmptyQueueExpression: return 2;
        case SyntaxKind::ConcatenationExpression: return 3;
        case SyntaxKind::MultipleConcatenationExpression: return 4;
        case SyntaxKind::StreamExpressionWithRange: return 2;
        case SyntaxKind::StreamExpression: return 2;
        case SyntaxKind::StreamingConcatenationExpression: return 7;
        case SyntaxKind::ParenthesizedExpression: return 3;
        case SyntaxKind::NewClassExpression: return 3;
        case SyntaxKind::NewArrayExpression: return 5;
        case SyntaxKind::NewExpression: return 2;
        case SyntaxKind::ElementSelectExpression: return 2;
        case SyntaxKind::MemberAccessExpression: return 3;
        case SyntaxKind::InvocationExpression: return 3;
        case SyntaxKind::CastExpression: return 3;
        case SyntaxKind::SignedCastExpression: return 3;
        case SyntaxKind::DelayControl: return 2;
        case SyntaxKind::CycleDelay: return 2;
        case SyntaxKind::EventControl: return 2;
        case SyntaxKind::SignalEventExpression: return 2;
        case SyntaxKind::BinaryEventExpression: return 3;
        case SyntaxKind::ParenthesizedEventExpression: return 3;
        case SyntaxKind::ImplicitEventControl: return 1;
        case SyntaxKind::ParenImplicitEventControl: return 2;
        case SyntaxKind::EventControlWithExpression: return 2;
        case SyntaxKind::RepeatedEventControl: return 5;
        case SyntaxKind::TimingControlExpression: return 2;
        case SyntaxKind::TimingControlExpressionConcatenation: return 3;
        case SyntaxKind::ShortcutCycleDelayRange: return 4;
        case SyntaxKind::RangeDimensionSpecifier: return 1;
        case SyntaxKind::DataTypeDimensionSpecifier: return 1;
        case SyntaxKind::WildcardDimensionSpecifier: return 1;
        case SyntaxKind::ColonExpressionClause: return 2;
        case SyntaxKind::QueueDimensionSpecifier: return 2;
        case SyntaxKind::VariableDimension: return 3;
        case SyntaxKind::VariableDeclarator: return 3;
        case SyntaxKind::DataDeclaration: return 5;
        case SyntaxKind::TypedefDeclaration: return 6;
        case SyntaxKind::TypedefKeywordDeclaration: return 5;
        case SyntaxKind::TypedefInterfaceClassDeclaration: return 6;
        case SyntaxKind::ChargeStrength: return 3;
        case SyntaxKind::DriveStrength: return 5;
        case SyntaxKind::NetDeclaration: return 7;
        case SyntaxKind::PackageImportItem: return 3;
        case SyntaxKind::PackageImportDeclaration: return 4;
        case SyntaxKind::ParameterDeclaration: return 3;
        case SyntaxKind::ParameterDeclarationStatement: return 3;
        case SyntaxKind::PortDeclaration: return 4;
        case SyntaxKind::GenvarDeclaration: return 4;
        case SyntaxKind::BitType: return 3;
        case SyntaxKind::LogicType: return 3;
        case SyntaxKind::RegType: return 3;
        case SyntaxKind::ByteType: return 3;
        case SyntaxKind::ShortIntType: return 3;
        case SyntaxKind::IntType: return 3;
        case SyntaxKind::LongIntType: return 3;
        case SyntaxKind::IntegerType: return 3;
        case SyntaxKind::TimeType: return 3;
        case SyntaxKind::ShortRealType: return 1;
        case SyntaxKind::RealType: return 1;
        case SyntaxKind::RealTimeType: return 1;
        case SyntaxKind::StringType: return 1;
        case SyntaxKind::CHandleType: return 1;
        case SyntaxKind::EventType: return 1;
        case SyntaxKind::VoidType: return 1;
        case SyntaxKind::TypeType: return 1;
        case SyntaxKind::Untyped: return 1;
        case SyntaxKind::PropertyType: return 1;
        case SyntaxKind::SequenceType: return 1;
        case SyntaxKind::NamedType: return 1;
        case SyntaxKind::StructUnionMember: return 5;
        case SyntaxKind::StructType: return 8;
        case SyntaxKind::UnionType: return 8;
        case SyntaxKind::EnumType: return 6;
        case SyntaxKind::TypeReference: return 4;
        case SyntaxKind::DotMemberClause: return 2;
        case SyntaxKind::VirtualInterfaceType: return 5;
        case SyntaxKind::ImplicitType: return 2;
        case SyntaxKind::VarDataType: return 2;
        case SyntaxKind::DeferredAssertion: return 3;
        case SyntaxKind::ElseClause: return 2;
        case SyntaxKind::ActionBlock: return 2;
        case SyntaxKind::ImmediateAssertStatement: return 6;
        case SyntaxKind::ImmediateAssumeStatement: return 6;
        case SyntaxKind::ImmediateCoverStatement: return 6;
        case SyntaxKind::DisableIff: return 5;
        case SyntaxKind::PropertySpec: return 3;
        case SyntaxKind::AssertPropertyStatement: return 8;
        case SyntaxKind::AssumePropertyStatement: return 8;
        case SyntaxKind::CoverSequenceStatement: return 8;
        case SyntaxKind::CoverPropertyStatement: return 8;
        case SyntaxKind::RestrictPropertyStatement: return 8;
        case SyntaxKind::ExpectPropertyStatement: return 8;
        case SyntaxKind::ConcurrentAssertionMember: return 2;
        case SyntaxKind::ImmediateAssertionMember: return 2;
        case SyntaxKind::EmptyStatement: return 3;
        case SyntaxKind::ConditionalStatement: return 9;
        case SyntaxKind::DefaultCaseItem: return 3;
        case SyntaxKind::PatternCaseItem: return 5;
        case SyntaxKind::StandardCaseItem: return 3;
        case SyntaxKind::CaseStatement: return 10;
        case SyntaxKind::ForeverStatement: return 4;
        case SyntaxKind::LoopStatement: return 7;
        case SyntaxKind::DoWhileStatement: return 9;
        case SyntaxKind::ForVariableDeclaration: return 3;
        case SyntaxKind::ForLoopStatement: return 11;
        case SyntaxKind::ForeachLoopList: return 6;
        case SyntaxKind::ForeachLoopStatement: return 5;
        case SyntaxKind::ReturnStatement: return 5;
        case SyntaxKind::JumpStatement: return 4;
        case SyntaxKind::TimingControlStatement: return 4;
        case SyntaxKind::ExpressionStatement: return 4;
        case SyntaxKind::ProceduralAssignStatement: return 7;
        case SyntaxKind::ProceduralForceStatement: return 7;
        case SyntaxKind::ProceduralDeassignStatement: return 5;
        case SyntaxKind::ProceduralReleaseStatement: return 5;
        case SyntaxKind::DisableStatement: return 5;
        case SyntaxKind::DisableForkStatement: return 5;
        case SyntaxKind::NamedBlockClause: return 2;
        case SyntaxKind::SequentialBlockStatement: return 7;
        case SyntaxKind::ParallelBlockStatement: return 7;
        case SyntaxKind::WaitStatement: return 7;
        case SyntaxKind::WaitForkStatement: return 5;
        case SyntaxKind::WaitOrderStatement: return 7;
        case SyntaxKind::RandCaseItem: return 3;
        case SyntaxKind::RandCaseStatement: return 5;
        case SyntaxKind::BlockingEventTriggerStatement: return 5;
        case SyntaxKind::NonblockingEventTriggerStatement: return 5;
        case SyntaxKind::ImplicitNonAnsiPort: return 1;
        case SyntaxKind::ExplicitNonAnsiPort: return 5;
        case SyntaxKind::NonAnsiPortList: return 3;
        case SyntaxKind::InterfacePortHeader: return 2;
        case SyntaxKind::VariablePortHeader: return 3;
        case SyntaxKind::InterconnectPortHeader: return 3;
        case SyntaxKind::NetPortHeader: return 3;
        case SyntaxKind::ImplicitAnsiPort: return 3;
        case SyntaxKind::ExplicitAnsiPort: return 7;
        case SyntaxKind::AnsiPortList: return 3;
        case SyntaxKind::WildcardPortList: return 3;
        case SyntaxKind::ParameterPortList: return 4;
        case SyntaxKind::ModuleHeader: return 7;
        case SyntaxKind::ProgramHeader: return 7;
        case SyntaxKind::InterfaceHeader: return 7;
        case SyntaxKind::PackageHeader: return 7;
        case SyntaxKind::ModuleDeclaration: return 5;
        case SyntaxKind::InterfaceDeclaration: return 5;
        case SyntaxKind::ProgramDeclaration: return 5;
        case SyntaxKind::PackageDeclaration: return 5;
        case SyntaxKind::ExternModule: return 2;
        case SyntaxKind::EmptyMember: return 3;
        case SyntaxKind::InitialBlock: return 3;
        case SyntaxKind::FinalBlock: return 3;
        case SyntaxKind::AlwaysBlock: return 3;
        case SyntaxKind::AlwaysCombBlock: return 3;
        case SyntaxKind::AlwaysFFBlock: return 3;
        case SyntaxKind::AlwaysLatchBlock: return 3;
        case SyntaxKind::GenerateRegion: return 4;
        case SyntaxKind::LoopGenerate: return 13;
        case SyntaxKind::IfGenerate: return 7;
        case SyntaxKind::CaseGenerate: return 7;
        case SyntaxKind::GenerateBlock: return 7;
        case SyntaxKind::DividerClause: return 2;
        case SyntaxKind::TimeUnitsDeclaration: return 5;
        case SyntaxKind::OrderedPortConnection: return 2;
        case SyntaxKind::NamedPortConnection: return 6;
        case SyntaxKind::WildcardPortConnection: return 2;
        case SyntaxKind::HierarchicalInstance: return 5;
        case SyntaxKind::HierarchyInstantiation: return 5;
        case SyntaxKind::FunctionPort: return 6;
        case SyntaxKind::FunctionPortList: return 3;
        case SyntaxKind::FunctionPrototype: return 6;
        case SyntaxKind::FunctionDeclaration: return 5;
        case SyntaxKind::TaskDeclaration: return 5;
        case SyntaxKind::AssertionItemPort: return 5;
        case SyntaxKind::AssertionItemPortList: return 3;
        case SyntaxKind::LetDeclaration: return 6;
        case SyntaxKind::PropertyDeclaration: return 10;
        case SyntaxKind::SequenceDeclaration: return 10;
        case SyntaxKind::ExtendsClause: return 3;
        case SyntaxKind::ImplementsClause: return 2;
        case SyntaxKind::ClassDeclaration: return 12;
        case SyntaxKind::ClassPropertyDeclaration: return 3;
        case SyntaxKind::ClassMethodDeclaration: return 3;
        case SyntaxKind::ClassMethodPrototype: return 3;
        case SyntaxKind::ContinuousAssign: return 4;
        case SyntaxKind::DefParamAssignment: return 2;
        case SyntaxKind::DefParam: return 4;
        case SyntaxKind::ModportItem: return 2;
        case SyntaxKind::ModportDeclaration: return 4;
        case SyntaxKind::ClockingSkew: return 3;
        case SyntaxKind::ClockingDirection: return 5;
        case SyntaxKind::ClockingItem: return 5;
        case SyntaxKind::ClockingDeclaration: return 11;
        case SyntaxKind::DPIImportExport: return 7;
        case SyntaxKind::DistWeight: return 2;
        case SyntaxKind::DistItem: return 2;
        case SyntaxKind::DistConstraintList: return 4;
        case SyntaxKind::ExpressionOrDist: return 2;
        case SyntaxKind::ExpressionConstraint: return 3;
        case SyntaxKind::UniquenessConstraint: return 3;
        case SyntaxKind::ImplicationConstraint: return 3;
        case SyntaxKind::ElseConstraintClause: return 2;
        case SyntaxKind::ConditionalConstraint: return 6;
        case SyntaxKind::LoopConstraint: return 3;
        case SyntaxKind::DisableConstraint: return 4;
        case SyntaxKind::SolveBeforeConstraint: return 5;
        case SyntaxKind::ConstraintBlock: return 3;
        case SyntaxKind::ConstraintPrototype: return 5;
        case SyntaxKind::ConstraintDeclaration: return 5;
        case SyntaxKind::WithClause: return 4;
        case SyntaxKind::IdentifierList: return 3;
        case SyntaxKind::RandomizeMethodWithClause: return 3;
        case SyntaxKind::WithFunctionSample: return 4;
        case SyntaxKind::BinaryBlockEventExpression: return 3;
        case SyntaxKind::PrimaryBlockEventExpression: return 2;
        case SyntaxKind::BlockCoverageEvent: return 4;
        case SyntaxKind::CovergroupDeclaration: return 9;
        case SyntaxKind::CoverageOption: return 7;
        case SyntaxKind::Coverpoint: return 9;
        case SyntaxKind::DefaultCoverageBinInitializer: return 2;
        case SyntaxKind::ExpressionCoverageBinInitializer: return 2;
        case SyntaxKind::RangeCoverageBinInitializer: return 2;
        case SyntaxKind::TransRepeatRange: return 4;
        case SyntaxKind::TransRange: return 2;
        case SyntaxKind::TransSet: return 3;
        case SyntaxKind::TransListCoverageBinInitializer: return 2;
        case SyntaxKind::IffClause: return 4;
        case SyntaxKind::CoverageBins: return 9;
        case SyntaxKind::CompilationUnit: return 2;
        case SyntaxKind::CellDefineDirective: return 2;
        case SyntaxKind::PragmaDirective: return 2;
        case SyntaxKind::UnconnectedDriveDirective: return 2;
        case SyntaxKind::NoUnconnectedDriveDirective: return 2;
        case SyntaxKind::EndCellDefineDirective: return 2;
        case SyntaxKind::EndKeywordsDirective: return 2;
        case SyntaxKind::ResetAllDirective: return 2;
        case SyntaxKind::UndefineAllDirective: return 2;
        case SyntaxKind::IncludeDirective: return 3;
        case SyntaxKind::ElsIfDirective: return 4;
        case SyntaxKind::IfDefDirective: return 4;
        case SyntaxKind::IfNDefDirective: return 4;
        case SyntaxKind::EndIfDirective: return 3;
        case SyntaxKind::ElseDirective: return 3;
        case SyntaxKind::MacroArgumentDefault: return 2;
        case SyntaxKind::MacroFormalArgument: return 2;
        case SyntaxKind::MacroFormalArgumentList: return 3;
        case SyntaxKind::DefineDirective: return 5;
        case SyntaxKind::MacroActualArgument: return 1;
        case SyntaxKind::MacroActualArgumentList: return 3;
        case SyntaxKind::MacroUsage: return 2;
        case SyntaxKind::TimescaleDirective: return 7;
        case SyntaxKind::DefaultNetTypeDirective: return 3;
        case SyntaxKind::LineDirective: return 5;
        case SyntaxKind::UndefDirective: return 3;
        case SyntaxKind::BeginKeywordsDirective: return 3;
    }
    THROW_UNREACHABLE;
}

bool ExpressionSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::WildcardInequalityExpression:
        case SyntaxKind::BinarySequenceDelayExpression:
        case SyntaxKind::OverlappedFollowedByPropertyExpression:
        case SyntaxKind::ThroughoutSequenceExpression:
        case SyntaxKind::ArrayOrMethod:
        case SyntaxKind::StructType:
        case SyntaxKind::NonOverlappedFollowedByPropertyExpression:
        case SyntaxKind::ScopedName:
        case SyntaxKind::InequalityExpression:
        case SyntaxKind::UnaryBitwiseNorExpression:
        case SyntaxKind::InsideExpression:
        case SyntaxKind::SEventuallyPropertyExpression:
        case SyntaxKind::SubtractAssignmentExpression:
        case SyntaxKind::OrSequenceExpression:
        case SyntaxKind::SignedCastExpression:
        case SyntaxKind::MultiplyAssignmentExpression:
        case SyntaxKind::ByteType:
        case SyntaxKind::ModAssignmentExpression:
        case SyntaxKind::AndSequenceExpression:
        case SyntaxKind::DivideAssignmentExpression:
        case SyntaxKind::WithinSequenceExpression:
        case SyntaxKind::UnitScope:
        case SyntaxKind::OneStepLiteralExpression:
        case SyntaxKind::ArithmeticShiftRightExpression:
        case SyntaxKind::TypeType:
        case SyntaxKind::IntegerLiteralExpression:
        case SyntaxKind::ClassName:
        case SyntaxKind::EventType:
        case SyntaxKind::XorAssignmentExpression:
        case SyntaxKind::ExpressionOrDist:
        case SyntaxKind::SuperHandle:
        case SyntaxKind::LogicalOrExpression:
        case SyntaxKind::SUntilWithPropertyExpression:
        case SyntaxKind::TypeReference:
        case SyntaxKind::ClassScope:
        case SyntaxKind::InvocationExpression:
        case SyntaxKind::ArrayXorMethod:
        case SyntaxKind::UnaryLogicalNotExpression:
        case SyntaxKind::VirtualInterfaceType:
        case SyntaxKind::WithClause:
        case SyntaxKind::ArithmeticShiftLeftExpression:
        case SyntaxKind::LogicType:
        case SyntaxKind::UnaryBitwiseXorExpression:
        case SyntaxKind::ConstructorName:
        case SyntaxKind::BinaryXorExpression:
        case SyntaxKind::UnaryNotPropertyExpression:
        case SyntaxKind::UnaryPlusExpression:
        case SyntaxKind::IffPropertyExpression:
        case SyntaxKind::CaseInequalityExpression:
        case SyntaxKind::BinaryAndExpression:
        case SyntaxKind::ConditionalExpression:
        case SyntaxKind::IntType:
        case SyntaxKind::AddExpression:
        case SyntaxKind::MultipleConcatenationExpression:
        case SyntaxKind::VoidType:
        case SyntaxKind::AcceptOnPropertyExpression:
        case SyntaxKind::EmptyIdentifierName:
        case SyntaxKind::ParenthesizedExpression:
        case SyntaxKind::NonOverlappedImplicationPropertyExpression:
        case SyntaxKind::UnarySequenceEventExpression:
        case SyntaxKind::StreamingConcatenationExpression:
        case SyntaxKind::UnarySequenceDelayExpression:
        case SyntaxKind::WildcardLiteralExpression:
        case SyntaxKind::RegType:
        case SyntaxKind::GreaterThanExpression:
        case SyntaxKind::EnumType:
        case SyntaxKind::LogicalImplicationExpression:
        case SyntaxKind::AssignmentExpression:
        case SyntaxKind::LogicalRightShiftAssignmentExpression:
        case SyntaxKind::IntegerVectorExpression:
        case SyntaxKind::Untyped:
        case SyntaxKind::PostincrementExpression:
        case SyntaxKind::SAlwaysPropertyExpression:
        case SyntaxKind::UnaryBitwiseOrExpression:
        case SyntaxKind::IdentifierSelectName:
        case SyntaxKind::NamedType:
        case SyntaxKind::LogicalAndExpression:
        case SyntaxKind::OrAssignmentExpression:
        case SyntaxKind::ShortIntType:
        case SyntaxKind::SequenceType:
        case SyntaxKind::CaseEqualityExpression:
        case SyntaxKind::GreaterThanEqualExpression:
        case SyntaxKind::ThisHandle:
        case SyntaxKind::TimingControlExpressionConcatenation:
        case SyntaxKind::PostdecrementExpression:
        case SyntaxKind::RealLiteralExpression:
        case SyntaxKind::RealTimeType:
        case SyntaxKind::AssignmentPatternExpression:
        case SyntaxKind::SNextTimePropertyExpression:
        case SyntaxKind::LocalScope:
        case SyntaxKind::RandomizeMethodWithClause:
        case SyntaxKind::AlwaysPropertyExpression:
        case SyntaxKind::UntilPropertyExpression:
        case SyntaxKind::EmptyQueueExpression:
        case SyntaxKind::WildcardEqualityExpression:
        case SyntaxKind::ImpliesPropertyExpression:
        case SyntaxKind::DivideExpression:
        case SyntaxKind::TimingControlExpression:
        case SyntaxKind::ArithmeticLeftShiftAssignmentExpression:
        case SyntaxKind::StringType:
        case SyntaxKind::VarDataType:
        case SyntaxKind::PropertyType:
        case SyntaxKind::UnaryBitwiseNotExpression:
        case SyntaxKind::MemberAccessExpression:
        case SyntaxKind::ArrayAndMethod:
        case SyntaxKind::RealType:
        case SyntaxKind::BitType:
        case SyntaxKind::NewClassExpression:
        case SyntaxKind::PowerExpression:
        case SyntaxKind::NullLiteralExpression:
        case SyntaxKind::LogicalShiftLeftExpression:
        case SyntaxKind::RootScope:
        case SyntaxKind::SystemName:
        case SyntaxKind::LogicalEquivalenceExpression:
        case SyntaxKind::LogicalLeftShiftAssignmentExpression:
        case SyntaxKind::IntegerType:
        case SyntaxKind::MinTypMaxExpression:
        case SyntaxKind::UnaryBitwiseAndExpression:
        case SyntaxKind::NewExpression:
        case SyntaxKind::ImplicitType:
        case SyntaxKind::ModExpression:
        case SyntaxKind::BinaryXnorExpression:
        case SyntaxKind::TaggedUnionExpression:
        case SyntaxKind::NextTimePropertyExpression:
        case SyntaxKind::ArithmeticRightShiftAssignmentExpression:
        case SyntaxKind::NonblockingAssignmentExpression:
        case SyntaxKind::CastExpression:
        case SyntaxKind::SubtractExpression:
        case SyntaxKind::IdentifierName:
        case SyntaxKind::UnionType:
        case SyntaxKind::SyncAcceptOnPropertyExpression:
        case SyntaxKind::BadExpression:
        case SyntaxKind::TimeLiteralExpression:
        case SyntaxKind::UnaryMinusExpression:
        case SyntaxKind::MultiplyExpression:
        case SyntaxKind::LessThanEqualExpression:
        case SyntaxKind::LessThanExpression:
        case SyntaxKind::BinaryOrExpression:
        case SyntaxKind::ConcatenationExpression:
        case SyntaxKind::CHandleType:
        case SyntaxKind::LongIntType:
        case SyntaxKind::UnaryBitwiseNandExpression:
        case SyntaxKind::DefaultPatternKeyExpression:
        case SyntaxKind::UntilWithPropertyExpression:
        case SyntaxKind::UnaryPredecrementExpression:
        case SyntaxKind::SyncRejectOnPropertyExpression:
        case SyntaxKind::ElementSelectExpression:
        case SyntaxKind::TimeType:
        case SyntaxKind::OverlappedImplicationPropertyExpression:
        case SyntaxKind::ElementSelect:
        case SyntaxKind::ArrayUniqueMethod:
        case SyntaxKind::StringLiteralExpression:
        case SyntaxKind::UnbasedUnsizedLiteralExpression:
        case SyntaxKind::IntersectSequenceExpression:
        case SyntaxKind::UnaryPreincrementExpression:
        case SyntaxKind::AddAssignmentExpression:
        case SyntaxKind::AndAssignmentExpression:
        case SyntaxKind::EventuallyPropertyExpression:
        case SyntaxKind::NewArrayExpression:
        case SyntaxKind::SUntilPropertyExpression:
        case SyntaxKind::ShortRealType:
        case SyntaxKind::EqualityExpression:
        case SyntaxKind::LogicalShiftRightExpression:
        case SyntaxKind::UnaryBitwiseXnorExpression:
        case SyntaxKind::RejectOnPropertyExpression:
            return true;
        default:
            return false;
    }
}

bool DataTypeSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::StructType:
        case SyntaxKind::LogicType:
        case SyntaxKind::UnionType:
        case SyntaxKind::IntType:
        case SyntaxKind::VoidType:
        case SyntaxKind::CHandleType:
        case SyntaxKind::ByteType:
        case SyntaxKind::LongIntType:
        case SyntaxKind::TimeType:
        case SyntaxKind::StringType:
        case SyntaxKind::VarDataType:
        case SyntaxKind::PropertyType:
        case SyntaxKind::RegType:
        case SyntaxKind::EnumType:
        case SyntaxKind::Untyped:
        case SyntaxKind::TypeType:
        case SyntaxKind::RealType:
        case SyntaxKind::BitType:
        case SyntaxKind::EventType:
        case SyntaxKind::NamedType:
        case SyntaxKind::ShortIntType:
        case SyntaxKind::IntegerType:
        case SyntaxKind::SequenceType:
        case SyntaxKind::ShortRealType:
        case SyntaxKind::TypeReference:
        case SyntaxKind::VirtualInterfaceType:
        case SyntaxKind::ImplicitType:
        case SyntaxKind::RealTimeType:
            return true;
        default:
            return false;
    }
}

bool EqualsValueClauseSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::EqualsValueClause;
}

bool AttributeSpecSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::AttributeSpec;
}

bool AttributeInstanceSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::AttributeInstance;
}

bool NamedLabelSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::NamedLabel;
}

bool StatementSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::CoverPropertyStatement:
        case SyntaxKind::ExpectPropertyStatement:
        case SyntaxKind::DisableStatement:
        case SyntaxKind::ProceduralAssignStatement:
        case SyntaxKind::ForeverStatement:
        case SyntaxKind::LoopStatement:
        case SyntaxKind::ProceduralReleaseStatement:
        case SyntaxKind::ExpressionStatement:
        case SyntaxKind::AssertPropertyStatement:
        case SyntaxKind::RestrictPropertyStatement:
        case SyntaxKind::ForLoopStatement:
        case SyntaxKind::AssumePropertyStatement:
        case SyntaxKind::DoWhileStatement:
        case SyntaxKind::ForeachLoopStatement:
        case SyntaxKind::BlockingEventTriggerStatement:
        case SyntaxKind::CaseStatement:
        case SyntaxKind::ParallelBlockStatement:
        case SyntaxKind::JumpStatement:
        case SyntaxKind::ImmediateCoverStatement:
        case SyntaxKind::ReturnStatement:
        case SyntaxKind::ConditionalStatement:
        case SyntaxKind::WaitOrderStatement:
        case SyntaxKind::WaitStatement:
        case SyntaxKind::WaitForkStatement:
        case SyntaxKind::CoverSequenceStatement:
        case SyntaxKind::NonblockingEventTriggerStatement:
        case SyntaxKind::ProceduralDeassignStatement:
        case SyntaxKind::TimingControlStatement:
        case SyntaxKind::DisableForkStatement:
        case SyntaxKind::ProceduralForceStatement:
        case SyntaxKind::RandCaseStatement:
        case SyntaxKind::ImmediateAssumeStatement:
        case SyntaxKind::ImmediateAssertStatement:
        case SyntaxKind::EmptyStatement:
        case SyntaxKind::SequentialBlockStatement:
            return true;
        default:
            return false;
    }
}

bool MemberSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::DataDeclaration:
        case SyntaxKind::FunctionDeclaration:
        case SyntaxKind::TimeUnitsDeclaration:
        case SyntaxKind::TypedefInterfaceClassDeclaration:
        case SyntaxKind::FinalBlock:
        case SyntaxKind::ClassDeclaration:
        case SyntaxKind::EmptyMember:
        case SyntaxKind::HierarchyInstantiation:
        case SyntaxKind::CoverageBins:
        case SyntaxKind::ImmediateAssertionMember:
        case SyntaxKind::ClockingDeclaration:
        case SyntaxKind::PortDeclaration:
        case SyntaxKind::ContinuousAssign:
        case SyntaxKind::IfGenerate:
        case SyntaxKind::PackageImportDeclaration:
        case SyntaxKind::ProgramDeclaration:
        case SyntaxKind::ClassPropertyDeclaration:
        case SyntaxKind::TaskDeclaration:
        case SyntaxKind::CovergroupDeclaration:
        case SyntaxKind::ModuleDeclaration:
        case SyntaxKind::TypedefDeclaration:
        case SyntaxKind::AlwaysCombBlock:
        case SyntaxKind::GenerateRegion:
        case SyntaxKind::GenvarDeclaration:
        case SyntaxKind::ConcurrentAssertionMember:
        case SyntaxKind::ModportDeclaration:
        case SyntaxKind::ClassMethodPrototype:
        case SyntaxKind::CoverageOption:
        case SyntaxKind::PropertyDeclaration:
        case SyntaxKind::InterfaceDeclaration:
        case SyntaxKind::AlwaysBlock:
        case SyntaxKind::LetDeclaration:
        case SyntaxKind::TypedefKeywordDeclaration:
        case SyntaxKind::ClassMethodDeclaration:
        case SyntaxKind::DefParam:
        case SyntaxKind::ConstraintDeclaration:
        case SyntaxKind::NetDeclaration:
        case SyntaxKind::LoopGenerate:
        case SyntaxKind::ParameterDeclarationStatement:
        case SyntaxKind::AlwaysLatchBlock:
        case SyntaxKind::DPIImportExport:
        case SyntaxKind::SequenceDeclaration:
        case SyntaxKind::ConstraintPrototype:
        case SyntaxKind::InitialBlock:
        case SyntaxKind::PackageDeclaration:
        case SyntaxKind::AlwaysFFBlock:
        case SyntaxKind::GenerateBlock:
        case SyntaxKind::CaseGenerate:
        case SyntaxKind::Coverpoint:
            return true;
        default:
            return false;
    }
}

bool ArgumentSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::OrderedArgument:
        case SyntaxKind::NamedArgument:
        case SyntaxKind::EmptyArgument:
            return true;
        default:
            return false;
    }
}

bool EmptyArgumentSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::EmptyArgument;
}

bool OrderedArgumentSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::OrderedArgument;
}

bool NamedArgumentSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::NamedArgument;
}

bool ArgumentListSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ArgumentList;
}

bool ParameterValueAssignmentSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ParameterValueAssignment;
}

bool PatternSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::StructurePattern:
        case SyntaxKind::VariablePattern:
        case SyntaxKind::ExpressionPattern:
        case SyntaxKind::TaggedPattern:
        case SyntaxKind::WildcardPattern:
            return true;
        default:
            return false;
    }
}

bool VariablePatternSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::VariablePattern;
}

bool WildcardPatternSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::WildcardPattern;
}

bool ExpressionPatternSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ExpressionPattern;
}

bool TaggedPatternSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::TaggedPattern;
}

bool StructurePatternMemberSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::OrderedStructurePatternMember:
        case SyntaxKind::NamedStructurePatternMember:
            return true;
        default:
            return false;
    }
}

bool OrderedStructurePatternMemberSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::OrderedStructurePatternMember;
}

bool NamedStructurePatternMemberSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::NamedStructurePatternMember;
}

bool StructurePatternSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::StructurePattern;
}

bool MatchesClauseSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::MatchesClause;
}

bool ConditionalPatternSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ConditionalPattern;
}

bool ConditionalPredicateSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ConditionalPredicate;
}

bool AssignmentPatternSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::SimpleAssignmentPattern:
        case SyntaxKind::StructuredAssignmentPattern:
        case SyntaxKind::ReplicatedAssignmentPattern:
            return true;
        default:
            return false;
    }
}

bool SimpleAssignmentPatternSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::SimpleAssignmentPattern;
}

bool AssignmentPatternItemSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::AssignmentPatternItem;
}

bool StructuredAssignmentPatternSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::StructuredAssignmentPattern;
}

bool ReplicatedAssignmentPatternSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ReplicatedAssignmentPattern;
}

bool BadExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::BadExpression;
}

bool PrimaryExpressionSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::AssignmentPatternExpression:
        case SyntaxKind::DefaultPatternKeyExpression:
        case SyntaxKind::EmptyQueueExpression:
        case SyntaxKind::NullLiteralExpression:
        case SyntaxKind::OneStepLiteralExpression:
        case SyntaxKind::WildcardLiteralExpression:
        case SyntaxKind::StringLiteralExpression:
        case SyntaxKind::MultipleConcatenationExpression:
        case SyntaxKind::StreamingConcatenationExpression:
        case SyntaxKind::ParenthesizedExpression:
        case SyntaxKind::UnbasedUnsizedLiteralExpression:
        case SyntaxKind::IntegerVectorExpression:
        case SyntaxKind::ConcatenationExpression:
        case SyntaxKind::IntegerLiteralExpression:
        case SyntaxKind::TimeLiteralExpression:
        case SyntaxKind::RealLiteralExpression:
            return true;
        default:
            return false;
    }
}

bool PrefixUnaryExpressionSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::UnaryBitwiseXorExpression:
        case SyntaxKind::SNextTimePropertyExpression:
        case SyntaxKind::NextTimePropertyExpression:
        case SyntaxKind::UnaryNotPropertyExpression:
        case SyntaxKind::UnaryPlusExpression:
        case SyntaxKind::UnaryBitwiseNorExpression:
        case SyntaxKind::SyncAcceptOnPropertyExpression:
        case SyntaxKind::AlwaysPropertyExpression:
        case SyntaxKind::SEventuallyPropertyExpression:
        case SyntaxKind::UnaryMinusExpression:
        case SyntaxKind::AcceptOnPropertyExpression:
        case SyntaxKind::UnarySequenceEventExpression:
        case SyntaxKind::UnaryBitwiseNandExpression:
        case SyntaxKind::UnaryPredecrementExpression:
        case SyntaxKind::SyncRejectOnPropertyExpression:
        case SyntaxKind::UnarySequenceDelayExpression:
        case SyntaxKind::UnaryBitwiseNotExpression:
        case SyntaxKind::UnaryPreincrementExpression:
        case SyntaxKind::UnaryBitwiseOrExpression:
        case SyntaxKind::SAlwaysPropertyExpression:
        case SyntaxKind::EventuallyPropertyExpression:
        case SyntaxKind::UnaryBitwiseAndExpression:
        case SyntaxKind::UnaryLogicalNotExpression:
        case SyntaxKind::UnaryBitwiseXnorExpression:
        case SyntaxKind::RejectOnPropertyExpression:
            return true;
        default:
            return false;
    }
}

bool PostfixUnaryExpressionSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::PostdecrementExpression:
        case SyntaxKind::PostincrementExpression:
            return true;
        default:
            return false;
    }
}

bool BinaryExpressionSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::ModExpression:
        case SyntaxKind::WildcardInequalityExpression:
        case SyntaxKind::BinaryXnorExpression:
        case SyntaxKind::BinarySequenceDelayExpression:
        case SyntaxKind::ThroughoutSequenceExpression:
        case SyntaxKind::OverlappedFollowedByPropertyExpression:
        case SyntaxKind::NonOverlappedFollowedByPropertyExpression:
        case SyntaxKind::ArithmeticRightShiftAssignmentExpression:
        case SyntaxKind::NonblockingAssignmentExpression:
        case SyntaxKind::InequalityExpression:
        case SyntaxKind::SubtractExpression:
        case SyntaxKind::BinaryXorExpression:
        case SyntaxKind::IffPropertyExpression:
        case SyntaxKind::CaseInequalityExpression:
        case SyntaxKind::BinaryAndExpression:
        case SyntaxKind::UntilPropertyExpression:
        case SyntaxKind::SubtractAssignmentExpression:
        case SyntaxKind::AddExpression:
        case SyntaxKind::MultiplyExpression:
        case SyntaxKind::WildcardEqualityExpression:
        case SyntaxKind::LessThanExpression:
        case SyntaxKind::LessThanEqualExpression:
        case SyntaxKind::OrSequenceExpression:
        case SyntaxKind::ImpliesPropertyExpression:
        case SyntaxKind::MultiplyAssignmentExpression:
        case SyntaxKind::BinaryOrExpression:
        case SyntaxKind::DivideExpression:
        case SyntaxKind::NonOverlappedImplicationPropertyExpression:
        case SyntaxKind::ModAssignmentExpression:
        case SyntaxKind::UntilWithPropertyExpression:
        case SyntaxKind::AndSequenceExpression:
        case SyntaxKind::DivideAssignmentExpression:
        case SyntaxKind::ArithmeticLeftShiftAssignmentExpression:
        case SyntaxKind::WithinSequenceExpression:
        case SyntaxKind::OverlappedImplicationPropertyExpression:
        case SyntaxKind::GreaterThanExpression:
        case SyntaxKind::LogicalImplicationExpression:
        case SyntaxKind::ArithmeticShiftRightExpression:
        case SyntaxKind::AssignmentExpression:
        case SyntaxKind::LogicalRightShiftAssignmentExpression:
        case SyntaxKind::IntersectSequenceExpression:
        case SyntaxKind::AddAssignmentExpression:
        case SyntaxKind::AndAssignmentExpression:
        case SyntaxKind::XorAssignmentExpression:
        case SyntaxKind::PowerExpression:
        case SyntaxKind::LogicalAndExpression:
        case SyntaxKind::OrAssignmentExpression:
        case SyntaxKind::LogicalShiftLeftExpression:
        case SyntaxKind::LogicalOrExpression:
        case SyntaxKind::SUntilWithPropertyExpression:
        case SyntaxKind::LogicalEquivalenceExpression:
        case SyntaxKind::LogicalLeftShiftAssignmentExpression:
        case SyntaxKind::CaseEqualityExpression:
        case SyntaxKind::SUntilPropertyExpression:
        case SyntaxKind::GreaterThanEqualExpression:
        case SyntaxKind::EqualityExpression:
        case SyntaxKind::LogicalShiftRightExpression:
        case SyntaxKind::ArithmeticShiftLeftExpression:
            return true;
        default:
            return false;
    }
}

bool MinTypMaxExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::MinTypMaxExpression;
}

bool TaggedUnionExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::TaggedUnionExpression;
}

bool OpenRangeListSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::OpenRangeList;
}

bool InsideExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::InsideExpression;
}

bool ConditionalExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ConditionalExpression;
}

bool AssignmentPatternExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::AssignmentPatternExpression;
}

bool SelectorSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::AscendingRangeSelect:
        case SyntaxKind::DescendingRangeSelect:
        case SyntaxKind::SimpleRangeSelect:
        case SyntaxKind::BitSelect:
            return true;
        default:
            return false;
    }
}

bool BitSelectSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::BitSelect;
}

bool RangeSelectSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::AscendingRangeSelect:
        case SyntaxKind::DescendingRangeSelect:
        case SyntaxKind::SimpleRangeSelect:
            return true;
        default:
            return false;
    }
}

bool ElementSelectSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ElementSelect;
}

bool NameSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::IdentifierSelectName:
        case SyntaxKind::SuperHandle:
        case SyntaxKind::ConstructorName:
        case SyntaxKind::ArrayOrMethod:
        case SyntaxKind::UnitScope:
        case SyntaxKind::RootScope:
        case SyntaxKind::SystemName:
        case SyntaxKind::ScopedName:
        case SyntaxKind::LocalScope:
        case SyntaxKind::ArrayUniqueMethod:
        case SyntaxKind::IdentifierName:
        case SyntaxKind::ThisHandle:
        case SyntaxKind::EmptyIdentifierName:
        case SyntaxKind::ArrayAndMethod:
        case SyntaxKind::ClassScope:
        case SyntaxKind::ArrayXorMethod:
        case SyntaxKind::ClassName:
            return true;
        default:
            return false;
    }
}

bool IdentifierNameSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::IdentifierName;
}

bool IdentifierSelectNameSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::IdentifierSelectName;
}

bool EmptyIdentifierNameSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::EmptyIdentifierName;
}

bool KeywordNameSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::SuperHandle:
        case SyntaxKind::ConstructorName:
        case SyntaxKind::ArrayOrMethod:
        case SyntaxKind::UnitScope:
        case SyntaxKind::RootScope:
        case SyntaxKind::SystemName:
        case SyntaxKind::LocalScope:
        case SyntaxKind::ArrayUniqueMethod:
        case SyntaxKind::ThisHandle:
        case SyntaxKind::ArrayAndMethod:
        case SyntaxKind::ArrayXorMethod:
            return true;
        default:
            return false;
    }
}

bool ClassNameSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ClassName;
}

bool ScopedNameSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ScopedName;
}

bool ClassScopeSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ClassScope;
}

bool LiteralExpressionSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::DefaultPatternKeyExpression:
        case SyntaxKind::NullLiteralExpression:
        case SyntaxKind::OneStepLiteralExpression:
        case SyntaxKind::WildcardLiteralExpression:
        case SyntaxKind::StringLiteralExpression:
        case SyntaxKind::UnbasedUnsizedLiteralExpression:
        case SyntaxKind::IntegerLiteralExpression:
        case SyntaxKind::TimeLiteralExpression:
        case SyntaxKind::RealLiteralExpression:
            return true;
        default:
            return false;
    }
}

bool IntegerVectorExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::IntegerVectorExpression;
}

bool EmptyQueueExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::EmptyQueueExpression;
}

bool ConcatenationExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ConcatenationExpression;
}

bool MultipleConcatenationExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::MultipleConcatenationExpression;
}

bool StreamExpressionWithRange::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::StreamExpressionWithRange;
}

bool StreamExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::StreamExpression;
}

bool StreamingConcatenationExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::StreamingConcatenationExpression;
}

bool ParenthesizedExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ParenthesizedExpression;
}

bool NewClassExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::NewClassExpression;
}

bool NewArrayExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::NewArrayExpression;
}

bool NewExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::NewExpression;
}

bool ElementSelectExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ElementSelectExpression;
}

bool MemberAccessExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::MemberAccessExpression;
}

bool InvocationExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::InvocationExpression;
}

bool CastExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::CastExpression;
}

bool SignedCastExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::SignedCastExpression;
}

bool TimingControlSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::RepeatedEventControl:
        case SyntaxKind::DelayControl:
        case SyntaxKind::EventControl:
        case SyntaxKind::EventControlWithExpression:
        case SyntaxKind::CycleDelay:
        case SyntaxKind::ImplicitEventControl:
        case SyntaxKind::ShortcutCycleDelayRange:
        case SyntaxKind::ParenImplicitEventControl:
            return true;
        default:
            return false;
    }
}

bool DelaySyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::DelayControl:
        case SyntaxKind::CycleDelay:
            return true;
        default:
            return false;
    }
}

bool EventControlSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::EventControl;
}

bool EventExpressionSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::ParenthesizedEventExpression:
        case SyntaxKind::BinaryEventExpression:
        case SyntaxKind::SignalEventExpression:
            return true;
        default:
            return false;
    }
}

bool SignalEventExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::SignalEventExpression;
}

bool BinaryEventExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::BinaryEventExpression;
}

bool ParenthesizedEventExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ParenthesizedEventExpression;
}

bool ImplicitEventControlSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ImplicitEventControl;
}

bool ParenImplicitEventControlSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ParenImplicitEventControl;
}

bool EventControlWithExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::EventControlWithExpression;
}

bool RepeatedEventControlSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::RepeatedEventControl;
}

bool TimingControlExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::TimingControlExpression;
}

bool TimingControlExpressionConcatenationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::TimingControlExpressionConcatenation;
}

bool ShortcutCycleDelayRangeSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ShortcutCycleDelayRange;
}

bool DimensionSpecifierSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::DataTypeDimensionSpecifier:
        case SyntaxKind::WildcardDimensionSpecifier:
        case SyntaxKind::RangeDimensionSpecifier:
        case SyntaxKind::QueueDimensionSpecifier:
            return true;
        default:
            return false;
    }
}

bool RangeDimensionSpecifierSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::RangeDimensionSpecifier;
}

bool DataTypeDimensionSpecifierSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DataTypeDimensionSpecifier;
}

bool WildcardDimensionSpecifierSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::WildcardDimensionSpecifier;
}

bool ColonExpressionClauseSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ColonExpressionClause;
}

bool QueueDimensionSpecifierSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::QueueDimensionSpecifier;
}

bool VariableDimensionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::VariableDimension;
}

bool VariableDeclaratorSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::VariableDeclarator;
}

bool DataDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DataDeclaration;
}

bool TypedefDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::TypedefDeclaration;
}

bool TypedefKeywordDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::TypedefKeywordDeclaration;
}

bool TypedefInterfaceClassDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::TypedefInterfaceClassDeclaration;
}

bool NetStrengthSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::DriveStrength:
        case SyntaxKind::ChargeStrength:
            return true;
        default:
            return false;
    }
}

bool ChargeStrengthSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ChargeStrength;
}

bool DriveStrengthSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DriveStrength;
}

bool NetDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::NetDeclaration;
}

bool PackageImportItemSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::PackageImportItem;
}

bool PackageImportDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::PackageImportDeclaration;
}

bool ParameterDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ParameterDeclaration;
}

bool ParameterDeclarationStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ParameterDeclarationStatement;
}

bool PortHeaderSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::InterfacePortHeader:
        case SyntaxKind::NetPortHeader:
        case SyntaxKind::VariablePortHeader:
        case SyntaxKind::InterconnectPortHeader:
            return true;
        default:
            return false;
    }
}

bool PortDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::PortDeclaration;
}

bool GenvarDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::GenvarDeclaration;
}

bool IntegerTypeSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::LongIntType:
        case SyntaxKind::TimeType:
        case SyntaxKind::ShortIntType:
        case SyntaxKind::IntegerType:
        case SyntaxKind::RegType:
        case SyntaxKind::ByteType:
        case SyntaxKind::BitType:
        case SyntaxKind::IntType:
        case SyntaxKind::LogicType:
            return true;
        default:
            return false;
    }
}

bool KeywordTypeSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::StringType:
        case SyntaxKind::PropertyType:
        case SyntaxKind::SequenceType:
        case SyntaxKind::VoidType:
        case SyntaxKind::ShortRealType:
        case SyntaxKind::Untyped:
        case SyntaxKind::TypeType:
        case SyntaxKind::RealType:
        case SyntaxKind::CHandleType:
        case SyntaxKind::EventType:
        case SyntaxKind::RealTimeType:
            return true;
        default:
            return false;
    }
}

bool NamedTypeSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::NamedType;
}

bool StructUnionMemberSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::StructUnionMember;
}

bool StructUnionTypeSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::StructType:
        case SyntaxKind::UnionType:
            return true;
        default:
            return false;
    }
}

bool EnumTypeSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::EnumType;
}

bool TypeReferenceSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::TypeReference;
}

bool DotMemberClauseSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DotMemberClause;
}

bool VirtualInterfaceTypeSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::VirtualInterfaceType;
}

bool ImplicitTypeSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ImplicitType;
}

bool VarDataTypeSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::VarDataType;
}

bool DeferredAssertionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DeferredAssertion;
}

bool ElseClauseSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ElseClause;
}

bool ActionBlockSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ActionBlock;
}

bool ImmediateAssertionStatementSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::ImmediateCoverStatement:
        case SyntaxKind::ImmediateAssertStatement:
        case SyntaxKind::ImmediateAssumeStatement:
            return true;
        default:
            return false;
    }
}

bool DisableIffSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DisableIff;
}

bool PropertySpecSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::PropertySpec;
}

bool ConcurrentAssertionStatementSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::CoverPropertyStatement:
        case SyntaxKind::ExpectPropertyStatement:
        case SyntaxKind::AssertPropertyStatement:
        case SyntaxKind::RestrictPropertyStatement:
        case SyntaxKind::CoverSequenceStatement:
        case SyntaxKind::AssumePropertyStatement:
            return true;
        default:
            return false;
    }
}

bool ConcurrentAssertionMemberSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ConcurrentAssertionMember;
}

bool ImmediateAssertionMemberSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ImmediateAssertionMember;
}

bool EmptyStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::EmptyStatement;
}

bool ConditionalStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ConditionalStatement;
}

bool CaseItemSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::PatternCaseItem:
        case SyntaxKind::StandardCaseItem:
        case SyntaxKind::DefaultCaseItem:
            return true;
        default:
            return false;
    }
}

bool DefaultCaseItemSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DefaultCaseItem;
}

bool PatternCaseItemSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::PatternCaseItem;
}

bool StandardCaseItemSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::StandardCaseItem;
}

bool CaseStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::CaseStatement;
}

bool ForeverStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ForeverStatement;
}

bool LoopStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::LoopStatement;
}

bool DoWhileStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DoWhileStatement;
}

bool ForVariableDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ForVariableDeclaration;
}

bool ForLoopStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ForLoopStatement;
}

bool ForeachLoopListSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ForeachLoopList;
}

bool ForeachLoopStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ForeachLoopStatement;
}

bool ReturnStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ReturnStatement;
}

bool JumpStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::JumpStatement;
}

bool TimingControlStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::TimingControlStatement;
}

bool ExpressionStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ExpressionStatement;
}

bool ProceduralAssignStatementSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::ProceduralAssignStatement:
        case SyntaxKind::ProceduralForceStatement:
            return true;
        default:
            return false;
    }
}

bool ProceduralDeassignStatementSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::ProceduralDeassignStatement:
        case SyntaxKind::ProceduralReleaseStatement:
            return true;
        default:
            return false;
    }
}

bool DisableStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DisableStatement;
}

bool DisableForkStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DisableForkStatement;
}

bool NamedBlockClauseSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::NamedBlockClause;
}

bool BlockStatementSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::ParallelBlockStatement:
        case SyntaxKind::SequentialBlockStatement:
            return true;
        default:
            return false;
    }
}

bool WaitStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::WaitStatement;
}

bool WaitForkStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::WaitForkStatement;
}

bool WaitOrderStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::WaitOrderStatement;
}

bool RandCaseItemSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::RandCaseItem;
}

bool RandCaseStatementSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::RandCaseStatement;
}

bool EventTriggerStatementSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::NonblockingEventTriggerStatement:
        case SyntaxKind::BlockingEventTriggerStatement:
            return true;
        default:
            return false;
    }
}

bool PortListSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::WildcardPortList:
        case SyntaxKind::AnsiPortList:
        case SyntaxKind::NonAnsiPortList:
            return true;
        default:
            return false;
    }
}

bool NonAnsiPortSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::ImplicitNonAnsiPort:
        case SyntaxKind::ExplicitNonAnsiPort:
            return true;
        default:
            return false;
    }
}

bool ImplicitNonAnsiPortSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ImplicitNonAnsiPort;
}

bool ExplicitNonAnsiPortSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ExplicitNonAnsiPort;
}

bool NonAnsiPortListSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::NonAnsiPortList;
}

bool AnsiPortSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::ImplicitAnsiPort:
        case SyntaxKind::ExplicitAnsiPort:
            return true;
        default:
            return false;
    }
}

bool InterfacePortHeaderSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::InterfacePortHeader;
}

bool VariablePortHeaderSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::VariablePortHeader;
}

bool InterconnectPortHeaderSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::InterconnectPortHeader;
}

bool NetPortHeaderSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::NetPortHeader;
}

bool ImplicitAnsiPortSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ImplicitAnsiPort;
}

bool ExplicitAnsiPortSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ExplicitAnsiPort;
}

bool AnsiPortListSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::AnsiPortList;
}

bool WildcardPortListSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::WildcardPortList;
}

bool ParameterPortListSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ParameterPortList;
}

bool ModuleHeaderSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::ModuleHeader:
        case SyntaxKind::ProgramHeader:
        case SyntaxKind::PackageHeader:
        case SyntaxKind::InterfaceHeader:
            return true;
        default:
            return false;
    }
}

bool ModuleDeclarationSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::PackageDeclaration:
        case SyntaxKind::InterfaceDeclaration:
        case SyntaxKind::ModuleDeclaration:
        case SyntaxKind::ProgramDeclaration:
            return true;
        default:
            return false;
    }
}

bool ExternModuleSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ExternModule;
}

bool EmptyMemberSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::EmptyMember;
}

bool ProceduralBlockSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::AlwaysLatchBlock:
        case SyntaxKind::AlwaysBlock:
        case SyntaxKind::FinalBlock:
        case SyntaxKind::InitialBlock:
        case SyntaxKind::AlwaysCombBlock:
        case SyntaxKind::AlwaysFFBlock:
            return true;
        default:
            return false;
    }
}

bool GenerateRegionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::GenerateRegion;
}

bool LoopGenerateSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::LoopGenerate;
}

bool IfGenerateSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::IfGenerate;
}

bool CaseGenerateSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::CaseGenerate;
}

bool GenerateBlockSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::GenerateBlock;
}

bool DividerClauseSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DividerClause;
}

bool TimeUnitsDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::TimeUnitsDeclaration;
}

bool PortConnectionSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::WildcardPortConnection:
        case SyntaxKind::OrderedPortConnection:
        case SyntaxKind::NamedPortConnection:
            return true;
        default:
            return false;
    }
}

bool OrderedPortConnectionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::OrderedPortConnection;
}

bool NamedPortConnectionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::NamedPortConnection;
}

bool WildcardPortConnectionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::WildcardPortConnection;
}

bool HierarchicalInstanceSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::HierarchicalInstance;
}

bool HierarchyInstantiationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::HierarchyInstantiation;
}

bool FunctionPortSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::FunctionPort;
}

bool FunctionPortListSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::FunctionPortList;
}

bool FunctionPrototypeSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::FunctionPrototype;
}

bool FunctionDeclarationSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::FunctionDeclaration:
        case SyntaxKind::TaskDeclaration:
            return true;
        default:
            return false;
    }
}

bool AssertionItemPortSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::AssertionItemPort;
}

bool AssertionItemPortListSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::AssertionItemPortList;
}

bool LetDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::LetDeclaration;
}

bool PropertyDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::PropertyDeclaration;
}

bool SequenceDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::SequenceDeclaration;
}

bool ExtendsClauseSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ExtendsClause;
}

bool ImplementsClauseSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ImplementsClause;
}

bool ClassDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ClassDeclaration;
}

bool ClassPropertyDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ClassPropertyDeclaration;
}

bool ClassMethodDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ClassMethodDeclaration;
}

bool ClassMethodPrototypeSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ClassMethodPrototype;
}

bool ContinuousAssignSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ContinuousAssign;
}

bool DefParamAssignmentSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DefParamAssignment;
}

bool DefParamSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DefParam;
}

bool ModportItemSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ModportItem;
}

bool ModportDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ModportDeclaration;
}

bool ClockingSkewSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ClockingSkew;
}

bool ClockingDirectionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ClockingDirection;
}

bool ClockingItemSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ClockingItem;
}

bool ClockingDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ClockingDeclaration;
}

bool DPIImportExportSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DPIImportExport;
}

bool ConstraintItemSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::UniquenessConstraint:
        case SyntaxKind::ConstraintBlock:
        case SyntaxKind::ImplicationConstraint:
        case SyntaxKind::ConditionalConstraint:
        case SyntaxKind::LoopConstraint:
        case SyntaxKind::SolveBeforeConstraint:
        case SyntaxKind::DisableConstraint:
        case SyntaxKind::ExpressionConstraint:
            return true;
        default:
            return false;
    }
}

bool DistWeightSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DistWeight;
}

bool DistItemSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DistItem;
}

bool DistConstraintListSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DistConstraintList;
}

bool ExpressionOrDistSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ExpressionOrDist;
}

bool ExpressionConstraintSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ExpressionConstraint;
}

bool UniquenessConstraintSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::UniquenessConstraint;
}

bool ImplicationConstraintSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ImplicationConstraint;
}

bool ElseConstraintClauseSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ElseConstraintClause;
}

bool ConditionalConstraintSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ConditionalConstraint;
}

bool LoopConstraintSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::LoopConstraint;
}

bool DisableConstraintSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DisableConstraint;
}

bool SolveBeforeConstraintSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::SolveBeforeConstraint;
}

bool ConstraintBlockSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ConstraintBlock;
}

bool ConstraintPrototypeSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ConstraintPrototype;
}

bool ConstraintDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ConstraintDeclaration;
}

bool WithClauseSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::WithClause;
}

bool IdentifierListSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::IdentifierList;
}

bool RandomizeMethodWithClauseSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::RandomizeMethodWithClause;
}

bool WithFunctionSampleSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::WithFunctionSample;
}

bool BlockEventExpressionSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::BinaryBlockEventExpression:
        case SyntaxKind::PrimaryBlockEventExpression:
            return true;
        default:
            return false;
    }
}

bool BinaryBlockEventExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::BinaryBlockEventExpression;
}

bool PrimaryBlockEventExpressionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::PrimaryBlockEventExpression;
}

bool BlockCoverageEventSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::BlockCoverageEvent;
}

bool CovergroupDeclarationSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::CovergroupDeclaration;
}

bool CoverageOptionSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::CoverageOption;
}

bool CoverpointSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::Coverpoint;
}

bool CoverageBinInitializerSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::RangeCoverageBinInitializer:
        case SyntaxKind::TransListCoverageBinInitializer:
        case SyntaxKind::DefaultCoverageBinInitializer:
        case SyntaxKind::ExpressionCoverageBinInitializer:
            return true;
        default:
            return false;
    }
}

bool DefaultCoverageBinInitializerSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DefaultCoverageBinInitializer;
}

bool ExpressionCoverageBinInitializerSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::ExpressionCoverageBinInitializer;
}

bool RangeCoverageBinInitializerSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::RangeCoverageBinInitializer;
}

bool TransRepeatRangeSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::TransRepeatRange;
}

bool TransRangeSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::TransRange;
}

bool TransSetSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::TransSet;
}

bool TransListCoverageBinInitializerSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::TransListCoverageBinInitializer;
}

bool IffClauseSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::IffClause;
}

bool CoverageBinsSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::CoverageBins;
}

bool CompilationUnitSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::CompilationUnit;
}

bool DirectiveSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::IfNDefDirective:
        case SyntaxKind::PragmaDirective:
        case SyntaxKind::NoUnconnectedDriveDirective:
        case SyntaxKind::ResetAllDirective:
        case SyntaxKind::ElseDirective:
        case SyntaxKind::CellDefineDirective:
        case SyntaxKind::MacroUsage:
        case SyntaxKind::UndefDirective:
        case SyntaxKind::IfDefDirective:
        case SyntaxKind::UndefineAllDirective:
        case SyntaxKind::ElsIfDirective:
        case SyntaxKind::EndKeywordsDirective:
        case SyntaxKind::IncludeDirective:
        case SyntaxKind::TimescaleDirective:
        case SyntaxKind::UnconnectedDriveDirective:
        case SyntaxKind::BeginKeywordsDirective:
        case SyntaxKind::DefineDirective:
        case SyntaxKind::EndCellDefineDirective:
        case SyntaxKind::EndIfDirective:
        case SyntaxKind::LineDirective:
        case SyntaxKind::DefaultNetTypeDirective:
            return true;
        default:
            return false;
    }
}

bool SimpleDirectiveSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::UndefineAllDirective:
        case SyntaxKind::PragmaDirective:
        case SyntaxKind::NoUnconnectedDriveDirective:
        case SyntaxKind::ResetAllDirective:
        case SyntaxKind::EndKeywordsDirective:
        case SyntaxKind::CellDefineDirective:
        case SyntaxKind::UnconnectedDriveDirective:
        case SyntaxKind::EndCellDefineDirective:
            return true;
        default:
            return false;
    }
}

bool IncludeDirectiveSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::IncludeDirective;
}

bool ConditionalBranchDirectiveSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::IfNDefDirective:
        case SyntaxKind::ElsIfDirective:
        case SyntaxKind::IfDefDirective:
            return true;
        default:
            return false;
    }
}

bool UnconditionalBranchDirectiveSyntax::isKind(SyntaxKind kind) {
    switch (kind) {
        case SyntaxKind::EndIfDirective:
        case SyntaxKind::ElseDirective:
            return true;
        default:
            return false;
    }
}

bool MacroArgumentDefaultSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::MacroArgumentDefault;
}

bool MacroFormalArgumentSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::MacroFormalArgument;
}

bool MacroFormalArgumentListSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::MacroFormalArgumentList;
}

bool DefineDirectiveSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DefineDirective;
}

bool MacroActualArgumentSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::MacroActualArgument;
}

bool MacroActualArgumentListSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::MacroActualArgumentList;
}

bool MacroUsageSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::MacroUsage;
}

bool TimescaleDirectiveSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::TimescaleDirective;
}

bool DefaultNetTypeDirectiveSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::DefaultNetTypeDirective;
}

bool LineDirectiveSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::LineDirective;
}

bool UndefDirectiveSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::UndefDirective;
}

bool BeginKeywordsDirectiveSyntax::isKind(SyntaxKind kind) {
    return kind == SyntaxKind::BeginKeywordsDirective;
}

EqualsValueClauseSyntax& SyntaxFactory::equalsValueClause(Token equals, ExpressionSyntax& expr) {
    return *alloc.emplace<EqualsValueClauseSyntax>(equals, expr);
}

AttributeSpecSyntax& SyntaxFactory::attributeSpec(Token name, EqualsValueClauseSyntax* value) {
    return *alloc.emplace<AttributeSpecSyntax>(name, value);
}

AttributeInstanceSyntax& SyntaxFactory::attributeInstance(Token openParen, SeparatedSyntaxList<AttributeSpecSyntax> specs, Token closeParen) {
    return *alloc.emplace<AttributeInstanceSyntax>(openParen, specs, closeParen);
}

NamedLabelSyntax& SyntaxFactory::namedLabel(Token name, Token colon) {
    return *alloc.emplace<NamedLabelSyntax>(name, colon);
}

EmptyArgumentSyntax& SyntaxFactory::emptyArgument() {
    return *alloc.emplace<EmptyArgumentSyntax>();
}

OrderedArgumentSyntax& SyntaxFactory::orderedArgument(ExpressionSyntax& expr) {
    return *alloc.emplace<OrderedArgumentSyntax>(expr);
}

NamedArgumentSyntax& SyntaxFactory::namedArgument(Token dot, Token name, Token openParen, ExpressionSyntax* expr, Token closeParen) {
    return *alloc.emplace<NamedArgumentSyntax>(dot, name, openParen, expr, closeParen);
}

ArgumentListSyntax& SyntaxFactory::argumentList(Token openParen, SeparatedSyntaxList<ArgumentSyntax> parameters, Token closeParen) {
    return *alloc.emplace<ArgumentListSyntax>(openParen, parameters, closeParen);
}

ParameterValueAssignmentSyntax& SyntaxFactory::parameterValueAssignment(Token hash, ArgumentListSyntax& parameters) {
    return *alloc.emplace<ParameterValueAssignmentSyntax>(hash, parameters);
}

VariablePatternSyntax& SyntaxFactory::variablePattern(Token dot, Token variableName) {
    return *alloc.emplace<VariablePatternSyntax>(dot, variableName);
}

WildcardPatternSyntax& SyntaxFactory::wildcardPattern(Token dotStar) {
    return *alloc.emplace<WildcardPatternSyntax>(dotStar);
}

ExpressionPatternSyntax& SyntaxFactory::expressionPattern(ExpressionSyntax& expr) {
    return *alloc.emplace<ExpressionPatternSyntax>(expr);
}

TaggedPatternSyntax& SyntaxFactory::taggedPattern(Token tagged, Token memberName, PatternSyntax* pattern) {
    return *alloc.emplace<TaggedPatternSyntax>(tagged, memberName, pattern);
}

OrderedStructurePatternMemberSyntax& SyntaxFactory::orderedStructurePatternMember(PatternSyntax& pattern) {
    return *alloc.emplace<OrderedStructurePatternMemberSyntax>(pattern);
}

NamedStructurePatternMemberSyntax& SyntaxFactory::namedStructurePatternMember(Token name, Token colon, PatternSyntax& pattern) {
    return *alloc.emplace<NamedStructurePatternMemberSyntax>(name, colon, pattern);
}

StructurePatternSyntax& SyntaxFactory::structurePattern(Token openBrace, SeparatedSyntaxList<StructurePatternMemberSyntax> members, Token closeBrace) {
    return *alloc.emplace<StructurePatternSyntax>(openBrace, members, closeBrace);
}

MatchesClauseSyntax& SyntaxFactory::matchesClause(Token matchesKeyword, PatternSyntax& pattern) {
    return *alloc.emplace<MatchesClauseSyntax>(matchesKeyword, pattern);
}

ConditionalPatternSyntax& SyntaxFactory::conditionalPattern(ExpressionSyntax& expr, MatchesClauseSyntax* matchesClause) {
    return *alloc.emplace<ConditionalPatternSyntax>(expr, matchesClause);
}

ConditionalPredicateSyntax& SyntaxFactory::conditionalPredicate(SeparatedSyntaxList<ConditionalPatternSyntax> conditions) {
    return *alloc.emplace<ConditionalPredicateSyntax>(conditions);
}

SimpleAssignmentPatternSyntax& SyntaxFactory::simpleAssignmentPattern(Token openBrace, SeparatedSyntaxList<ExpressionSyntax> items, Token closeBrace) {
    return *alloc.emplace<SimpleAssignmentPatternSyntax>(openBrace, items, closeBrace);
}

AssignmentPatternItemSyntax& SyntaxFactory::assignmentPatternItem(ExpressionSyntax& key, Token colon, ExpressionSyntax& expr) {
    return *alloc.emplace<AssignmentPatternItemSyntax>(key, colon, expr);
}

StructuredAssignmentPatternSyntax& SyntaxFactory::structuredAssignmentPattern(Token openBrace, SeparatedSyntaxList<AssignmentPatternItemSyntax> items, Token closeBrace) {
    return *alloc.emplace<StructuredAssignmentPatternSyntax>(openBrace, items, closeBrace);
}

ReplicatedAssignmentPatternSyntax& SyntaxFactory::replicatedAssignmentPattern(Token openBrace, ExpressionSyntax& countExpr, Token innerOpenBrace, SeparatedSyntaxList<ExpressionSyntax> items, Token innerCloseBrace, Token closeBrace) {
    return *alloc.emplace<ReplicatedAssignmentPatternSyntax>(openBrace, countExpr, innerOpenBrace, items, innerCloseBrace, closeBrace);
}

BadExpressionSyntax& SyntaxFactory::badExpression(ExpressionSyntax& expr) {
    return *alloc.emplace<BadExpressionSyntax>(expr);
}

PrefixUnaryExpressionSyntax& SyntaxFactory::prefixUnaryExpression(SyntaxKind kind, Token operatorToken, SyntaxList<AttributeInstanceSyntax> attributes, ExpressionSyntax& operand) {
    return *alloc.emplace<PrefixUnaryExpressionSyntax>(kind, operatorToken, attributes, operand);
}

PostfixUnaryExpressionSyntax& SyntaxFactory::postfixUnaryExpression(SyntaxKind kind, ExpressionSyntax& operand, SyntaxList<AttributeInstanceSyntax> attributes, Token operatorToken) {
    return *alloc.emplace<PostfixUnaryExpressionSyntax>(kind, operand, attributes, operatorToken);
}

BinaryExpressionSyntax& SyntaxFactory::binaryExpression(SyntaxKind kind, ExpressionSyntax& left, Token operatorToken, SyntaxList<AttributeInstanceSyntax> attributes, ExpressionSyntax& right) {
    return *alloc.emplace<BinaryExpressionSyntax>(kind, left, operatorToken, attributes, right);
}

MinTypMaxExpressionSyntax& SyntaxFactory::minTypMaxExpression(ExpressionSyntax& min, Token colon1, ExpressionSyntax& typ, Token colon2, ExpressionSyntax& max) {
    return *alloc.emplace<MinTypMaxExpressionSyntax>(min, colon1, typ, colon2, max);
}

TaggedUnionExpressionSyntax& SyntaxFactory::taggedUnionExpression(Token tagged, Token member, ExpressionSyntax* expr) {
    return *alloc.emplace<TaggedUnionExpressionSyntax>(tagged, member, expr);
}

OpenRangeListSyntax& SyntaxFactory::openRangeList(Token openBrace, SeparatedSyntaxList<ExpressionSyntax> valueRanges, Token closeBrace) {
    return *alloc.emplace<OpenRangeListSyntax>(openBrace, valueRanges, closeBrace);
}

InsideExpressionSyntax& SyntaxFactory::insideExpression(ExpressionSyntax& expr, Token inside, OpenRangeListSyntax& ranges) {
    return *alloc.emplace<InsideExpressionSyntax>(expr, inside, ranges);
}

ConditionalExpressionSyntax& SyntaxFactory::conditionalExpression(ConditionalPredicateSyntax& predicate, Token question, SyntaxList<AttributeInstanceSyntax> attributes, ExpressionSyntax& left, Token colon, ExpressionSyntax& right) {
    return *alloc.emplace<ConditionalExpressionSyntax>(predicate, question, attributes, left, colon, right);
}

AssignmentPatternExpressionSyntax& SyntaxFactory::assignmentPatternExpression(DataTypeSyntax* type, AssignmentPatternSyntax& pattern) {
    return *alloc.emplace<AssignmentPatternExpressionSyntax>(type, pattern);
}

BitSelectSyntax& SyntaxFactory::bitSelect(ExpressionSyntax& expr) {
    return *alloc.emplace<BitSelectSyntax>(expr);
}

RangeSelectSyntax& SyntaxFactory::rangeSelect(SyntaxKind kind, ExpressionSyntax& left, Token range, ExpressionSyntax& right) {
    return *alloc.emplace<RangeSelectSyntax>(kind, left, range, right);
}

ElementSelectSyntax& SyntaxFactory::elementSelect(Token openBracket, SelectorSyntax* selector, Token closeBracket) {
    return *alloc.emplace<ElementSelectSyntax>(openBracket, selector, closeBracket);
}

IdentifierNameSyntax& SyntaxFactory::identifierName(Token identifier) {
    return *alloc.emplace<IdentifierNameSyntax>(identifier);
}

IdentifierSelectNameSyntax& SyntaxFactory::identifierSelectName(Token identifier, SyntaxList<ElementSelectSyntax> selectors) {
    return *alloc.emplace<IdentifierSelectNameSyntax>(identifier, selectors);
}

EmptyIdentifierNameSyntax& SyntaxFactory::emptyIdentifierName() {
    return *alloc.emplace<EmptyIdentifierNameSyntax>();
}

KeywordNameSyntax& SyntaxFactory::keywordName(SyntaxKind kind, Token keyword) {
    return *alloc.emplace<KeywordNameSyntax>(kind, keyword);
}

ClassNameSyntax& SyntaxFactory::className(Token identifier, ParameterValueAssignmentSyntax& parameters) {
    return *alloc.emplace<ClassNameSyntax>(identifier, parameters);
}

ScopedNameSyntax& SyntaxFactory::scopedName(NameSyntax& left, Token separator, NameSyntax& right) {
    return *alloc.emplace<ScopedNameSyntax>(left, separator, right);
}

ClassScopeSyntax& SyntaxFactory::classScope(NameSyntax& left, Token separator) {
    return *alloc.emplace<ClassScopeSyntax>(left, separator);
}

LiteralExpressionSyntax& SyntaxFactory::literalExpression(SyntaxKind kind, Token literal) {
    return *alloc.emplace<LiteralExpressionSyntax>(kind, literal);
}

IntegerVectorExpressionSyntax& SyntaxFactory::integerVectorExpression(Token size, Token base, Token value) {
    return *alloc.emplace<IntegerVectorExpressionSyntax>(size, base, value);
}

EmptyQueueExpressionSyntax& SyntaxFactory::emptyQueueExpression(Token openBrace, Token closeBrace) {
    return *alloc.emplace<EmptyQueueExpressionSyntax>(openBrace, closeBrace);
}

ConcatenationExpressionSyntax& SyntaxFactory::concatenationExpression(Token openBrace, SeparatedSyntaxList<ExpressionSyntax> expressions, Token closeBrace) {
    return *alloc.emplace<ConcatenationExpressionSyntax>(openBrace, expressions, closeBrace);
}

MultipleConcatenationExpressionSyntax& SyntaxFactory::multipleConcatenationExpression(Token openBrace, ExpressionSyntax& expression, ConcatenationExpressionSyntax& concatenation, Token closeBrace) {
    return *alloc.emplace<MultipleConcatenationExpressionSyntax>(openBrace, expression, concatenation, closeBrace);
}

StreamExpressionWithRange& SyntaxFactory::streamExpressionWithRange(Token withKeyword, ElementSelectSyntax& range) {
    return *alloc.emplace<StreamExpressionWithRange>(withKeyword, range);
}

StreamExpressionSyntax& SyntaxFactory::streamExpression(ExpressionSyntax& expression, StreamExpressionWithRange* withRange) {
    return *alloc.emplace<StreamExpressionSyntax>(expression, withRange);
}

StreamingConcatenationExpressionSyntax& SyntaxFactory::streamingConcatenationExpression(Token openBrace, Token operatorToken, ExpressionSyntax* sliceSize, Token innerOpenBrace, SeparatedSyntaxList<StreamExpressionSyntax> expressions, Token innerCloseBrace, Token closeBrace) {
    return *alloc.emplace<StreamingConcatenationExpressionSyntax>(openBrace, operatorToken, sliceSize, innerOpenBrace, expressions, innerCloseBrace, closeBrace);
}

ParenthesizedExpressionSyntax& SyntaxFactory::parenthesizedExpression(Token openParen, ExpressionSyntax& expression, Token closeParen) {
    return *alloc.emplace<ParenthesizedExpressionSyntax>(openParen, expression, closeParen);
}

NewClassExpressionSyntax& SyntaxFactory::newClassExpression(ClassScopeSyntax* classScope, Token newKeyword, ArgumentListSyntax* arguments) {
    return *alloc.emplace<NewClassExpressionSyntax>(classScope, newKeyword, arguments);
}

NewArrayExpressionSyntax& SyntaxFactory::newArrayExpression(Token newKeyword, Token openBracket, ExpressionSyntax& sizeExpr, Token closeBracket, ParenthesizedExpressionSyntax* initializer) {
    return *alloc.emplace<NewArrayExpressionSyntax>(newKeyword, openBracket, sizeExpr, closeBracket, initializer);
}

NewExpressionSyntax& SyntaxFactory::newExpression(Token newKeyword, ExpressionSyntax& expr) {
    return *alloc.emplace<NewExpressionSyntax>(newKeyword, expr);
}

ElementSelectExpressionSyntax& SyntaxFactory::elementSelectExpression(ExpressionSyntax& left, ElementSelectSyntax& select) {
    return *alloc.emplace<ElementSelectExpressionSyntax>(left, select);
}

MemberAccessExpressionSyntax& SyntaxFactory::memberAccessExpression(ExpressionSyntax& left, Token dot, Token name) {
    return *alloc.emplace<MemberAccessExpressionSyntax>(left, dot, name);
}

InvocationExpressionSyntax& SyntaxFactory::invocationExpression(ExpressionSyntax& left, SyntaxList<AttributeInstanceSyntax> attributes, ArgumentListSyntax* arguments) {
    return *alloc.emplace<InvocationExpressionSyntax>(left, attributes, arguments);
}

CastExpressionSyntax& SyntaxFactory::castExpression(ExpressionSyntax& left, Token apostrophe, ParenthesizedExpressionSyntax& right) {
    return *alloc.emplace<CastExpressionSyntax>(left, apostrophe, right);
}

SignedCastExpressionSyntax& SyntaxFactory::signedCastExpression(Token signing, Token apostrophe, ParenthesizedExpressionSyntax& inner) {
    return *alloc.emplace<SignedCastExpressionSyntax>(signing, apostrophe, inner);
}

DelaySyntax& SyntaxFactory::delay(SyntaxKind kind, Token hash, ExpressionSyntax& delayValue) {
    return *alloc.emplace<DelaySyntax>(kind, hash, delayValue);
}

EventControlSyntax& SyntaxFactory::eventControl(Token at, NameSyntax& eventName) {
    return *alloc.emplace<EventControlSyntax>(at, eventName);
}

SignalEventExpressionSyntax& SyntaxFactory::signalEventExpression(Token edge, ExpressionSyntax& expr) {
    return *alloc.emplace<SignalEventExpressionSyntax>(edge, expr);
}

BinaryEventExpressionSyntax& SyntaxFactory::binaryEventExpression(EventExpressionSyntax& left, Token operatorToken, EventExpressionSyntax& right) {
    return *alloc.emplace<BinaryEventExpressionSyntax>(left, operatorToken, right);
}

ParenthesizedEventExpressionSyntax& SyntaxFactory::parenthesizedEventExpression(Token openParen, EventExpressionSyntax& expr, Token closeParen) {
    return *alloc.emplace<ParenthesizedEventExpressionSyntax>(openParen, expr, closeParen);
}

ImplicitEventControlSyntax& SyntaxFactory::implicitEventControl(Token atStar) {
    return *alloc.emplace<ImplicitEventControlSyntax>(atStar);
}

ParenImplicitEventControlSyntax& SyntaxFactory::parenImplicitEventControl(Token at, Token openParenStarCloseParen) {
    return *alloc.emplace<ParenImplicitEventControlSyntax>(at, openParenStarCloseParen);
}

EventControlWithExpressionSyntax& SyntaxFactory::eventControlWithExpression(Token at, EventExpressionSyntax& expr) {
    return *alloc.emplace<EventControlWithExpressionSyntax>(at, expr);
}

RepeatedEventControlSyntax& SyntaxFactory::repeatedEventControl(Token repeat, Token openParen, ExpressionSyntax& expr, Token closeParen, TimingControlSyntax* eventControl) {
    return *alloc.emplace<RepeatedEventControlSyntax>(repeat, openParen, expr, closeParen, eventControl);
}

TimingControlExpressionSyntax& SyntaxFactory::timingControlExpression(TimingControlSyntax& timing, ExpressionSyntax& expr) {
    return *alloc.emplace<TimingControlExpressionSyntax>(timing, expr);
}

TimingControlExpressionConcatenationSyntax& SyntaxFactory::timingControlExpressionConcatenation(ExpressionSyntax& left, TimingControlSyntax& timing, ExpressionSyntax& right) {
    return *alloc.emplace<TimingControlExpressionConcatenationSyntax>(left, timing, right);
}

ShortcutCycleDelayRangeSyntax& SyntaxFactory::shortcutCycleDelayRange(Token doubleHash, Token openBracket, Token op, Token closeBracket) {
    return *alloc.emplace<ShortcutCycleDelayRangeSyntax>(doubleHash, openBracket, op, closeBracket);
}

RangeDimensionSpecifierSyntax& SyntaxFactory::rangeDimensionSpecifier(SelectorSyntax& selector) {
    return *alloc.emplace<RangeDimensionSpecifierSyntax>(selector);
}

DataTypeDimensionSpecifierSyntax& SyntaxFactory::dataTypeDimensionSpecifier(DataTypeSyntax& type) {
    return *alloc.emplace<DataTypeDimensionSpecifierSyntax>(type);
}

WildcardDimensionSpecifierSyntax& SyntaxFactory::wildcardDimensionSpecifier(Token star) {
    return *alloc.emplace<WildcardDimensionSpecifierSyntax>(star);
}

ColonExpressionClauseSyntax& SyntaxFactory::colonExpressionClause(Token colon, ExpressionSyntax& expr) {
    return *alloc.emplace<ColonExpressionClauseSyntax>(colon, expr);
}

QueueDimensionSpecifierSyntax& SyntaxFactory::queueDimensionSpecifier(Token dollar, ColonExpressionClauseSyntax* maxSizeClause) {
    return *alloc.emplace<QueueDimensionSpecifierSyntax>(dollar, maxSizeClause);
}

VariableDimensionSyntax& SyntaxFactory::variableDimension(Token openBracket, DimensionSpecifierSyntax* specifier, Token closeBracket) {
    return *alloc.emplace<VariableDimensionSyntax>(openBracket, specifier, closeBracket);
}

VariableDeclaratorSyntax& SyntaxFactory::variableDeclarator(Token name, SyntaxList<VariableDimensionSyntax> dimensions, EqualsValueClauseSyntax* initializer) {
    return *alloc.emplace<VariableDeclaratorSyntax>(name, dimensions, initializer);
}

DataDeclarationSyntax& SyntaxFactory::dataDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, TokenList modifiers, DataTypeSyntax& type, SeparatedSyntaxList<VariableDeclaratorSyntax> declarators, Token semi) {
    return *alloc.emplace<DataDeclarationSyntax>(attributes, modifiers, type, declarators, semi);
}

TypedefDeclarationSyntax& SyntaxFactory::typedefDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, Token typedefKeyword, DataTypeSyntax& type, Token name, SyntaxList<VariableDimensionSyntax> dimensions, Token semi) {
    return *alloc.emplace<TypedefDeclarationSyntax>(attributes, typedefKeyword, type, name, dimensions, semi);
}

TypedefKeywordDeclarationSyntax& SyntaxFactory::typedefKeywordDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, Token typedefKeyword, Token keyword, Token name, Token semi) {
    return *alloc.emplace<TypedefKeywordDeclarationSyntax>(attributes, typedefKeyword, keyword, name, semi);
}

TypedefInterfaceClassDeclarationSyntax& SyntaxFactory::typedefInterfaceClassDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, Token typedefKeyword, Token interfaceKeyword, Token classKeyword, Token name, Token semi) {
    return *alloc.emplace<TypedefInterfaceClassDeclarationSyntax>(attributes, typedefKeyword, interfaceKeyword, classKeyword, name, semi);
}

ChargeStrengthSyntax& SyntaxFactory::chargeStrength(Token openParen, Token strength, Token closeParen) {
    return *alloc.emplace<ChargeStrengthSyntax>(openParen, strength, closeParen);
}

DriveStrengthSyntax& SyntaxFactory::driveStrength(Token openParen, Token strength0, Token comma, Token strength1, Token closeParen) {
    return *alloc.emplace<DriveStrengthSyntax>(openParen, strength0, comma, strength1, closeParen);
}

NetDeclarationSyntax& SyntaxFactory::netDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, Token netType, NetStrengthSyntax* strength, Token expansionHint, DataTypeSyntax& type, SeparatedSyntaxList<VariableDeclaratorSyntax> declarators, Token semi) {
    return *alloc.emplace<NetDeclarationSyntax>(attributes, netType, strength, expansionHint, type, declarators, semi);
}

PackageImportItemSyntax& SyntaxFactory::packageImportItem(Token package, Token doubleColon, Token item) {
    return *alloc.emplace<PackageImportItemSyntax>(package, doubleColon, item);
}

PackageImportDeclarationSyntax& SyntaxFactory::packageImportDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, SeparatedSyntaxList<PackageImportItemSyntax> items, Token semi) {
    return *alloc.emplace<PackageImportDeclarationSyntax>(attributes, keyword, items, semi);
}

ParameterDeclarationSyntax& SyntaxFactory::parameterDeclaration(Token keyword, DataTypeSyntax& type, SeparatedSyntaxList<VariableDeclaratorSyntax> declarators) {
    return *alloc.emplace<ParameterDeclarationSyntax>(keyword, type, declarators);
}

ParameterDeclarationStatementSyntax& SyntaxFactory::parameterDeclarationStatement(SyntaxList<AttributeInstanceSyntax> attributes, ParameterDeclarationSyntax& parameter, Token semi) {
    return *alloc.emplace<ParameterDeclarationStatementSyntax>(attributes, parameter, semi);
}

PortDeclarationSyntax& SyntaxFactory::portDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, PortHeaderSyntax& header, SeparatedSyntaxList<VariableDeclaratorSyntax> declarators, Token semi) {
    return *alloc.emplace<PortDeclarationSyntax>(attributes, header, declarators, semi);
}

GenvarDeclarationSyntax& SyntaxFactory::genvarDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, SeparatedSyntaxList<IdentifierNameSyntax> identifiers, Token semi) {
    return *alloc.emplace<GenvarDeclarationSyntax>(attributes, keyword, identifiers, semi);
}

IntegerTypeSyntax& SyntaxFactory::integerType(SyntaxKind kind, Token keyword, Token signing, SyntaxList<VariableDimensionSyntax> dimensions) {
    return *alloc.emplace<IntegerTypeSyntax>(kind, keyword, signing, dimensions);
}

KeywordTypeSyntax& SyntaxFactory::keywordType(SyntaxKind kind, Token keyword) {
    return *alloc.emplace<KeywordTypeSyntax>(kind, keyword);
}

NamedTypeSyntax& SyntaxFactory::namedType(NameSyntax& name) {
    return *alloc.emplace<NamedTypeSyntax>(name);
}

StructUnionMemberSyntax& SyntaxFactory::structUnionMember(SyntaxList<AttributeInstanceSyntax> attributes, Token randomQualifier, DataTypeSyntax& type, SeparatedSyntaxList<VariableDeclaratorSyntax> declarators, Token semi) {
    return *alloc.emplace<StructUnionMemberSyntax>(attributes, randomQualifier, type, declarators, semi);
}

StructUnionTypeSyntax& SyntaxFactory::structUnionType(SyntaxKind kind, Token keyword, Token tagged, Token packed, Token signing, Token openBrace, SyntaxList<StructUnionMemberSyntax> members, Token closeBrace, SyntaxList<VariableDimensionSyntax> dimensions) {
    return *alloc.emplace<StructUnionTypeSyntax>(kind, keyword, tagged, packed, signing, openBrace, members, closeBrace, dimensions);
}

EnumTypeSyntax& SyntaxFactory::enumType(Token keyword, DataTypeSyntax* baseType, Token openBrace, SeparatedSyntaxList<VariableDeclaratorSyntax> members, Token closeBrace, SyntaxList<VariableDimensionSyntax> dimensions) {
    return *alloc.emplace<EnumTypeSyntax>(keyword, baseType, openBrace, members, closeBrace, dimensions);
}

TypeReferenceSyntax& SyntaxFactory::typeReference(Token typeKeyword, Token openParen, ExpressionSyntax& expr, Token closeParen) {
    return *alloc.emplace<TypeReferenceSyntax>(typeKeyword, openParen, expr, closeParen);
}

DotMemberClauseSyntax& SyntaxFactory::dotMemberClause(Token dot, Token member) {
    return *alloc.emplace<DotMemberClauseSyntax>(dot, member);
}

VirtualInterfaceTypeSyntax& SyntaxFactory::virtualInterfaceType(Token virtualKeyword, Token interfaceKeyword, Token name, ParameterValueAssignmentSyntax* parameters, DotMemberClauseSyntax* modport) {
    return *alloc.emplace<VirtualInterfaceTypeSyntax>(virtualKeyword, interfaceKeyword, name, parameters, modport);
}

ImplicitTypeSyntax& SyntaxFactory::implicitType(Token signing, SyntaxList<VariableDimensionSyntax> dimensions) {
    return *alloc.emplace<ImplicitTypeSyntax>(signing, dimensions);
}

VarDataTypeSyntax& SyntaxFactory::varDataType(Token var, DataTypeSyntax& type) {
    return *alloc.emplace<VarDataTypeSyntax>(var, type);
}

DeferredAssertionSyntax& SyntaxFactory::deferredAssertion(Token hash, Token zero, Token finalKeyword) {
    return *alloc.emplace<DeferredAssertionSyntax>(hash, zero, finalKeyword);
}

ElseClauseSyntax& SyntaxFactory::elseClause(Token elseKeyword, SyntaxNode& clause) {
    return *alloc.emplace<ElseClauseSyntax>(elseKeyword, clause);
}

ActionBlockSyntax& SyntaxFactory::actionBlock(StatementSyntax* statement, ElseClauseSyntax* elseClause) {
    return *alloc.emplace<ActionBlockSyntax>(statement, elseClause);
}

ImmediateAssertionStatementSyntax& SyntaxFactory::immediateAssertionStatement(SyntaxKind kind, NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, DeferredAssertionSyntax* delay, ParenthesizedExpressionSyntax& expr, ActionBlockSyntax& action) {
    return *alloc.emplace<ImmediateAssertionStatementSyntax>(kind, label, attributes, keyword, delay, expr, action);
}

DisableIffSyntax& SyntaxFactory::disableIff(Token disable, Token iff, Token openParen, ExpressionSyntax& expr, Token closeParen) {
    return *alloc.emplace<DisableIffSyntax>(disable, iff, openParen, expr, closeParen);
}

PropertySpecSyntax& SyntaxFactory::propertySpec(TimingControlSyntax* clocking, DisableIffSyntax* disable, ExpressionSyntax& expr) {
    return *alloc.emplace<PropertySpecSyntax>(clocking, disable, expr);
}

ConcurrentAssertionStatementSyntax& SyntaxFactory::concurrentAssertionStatement(SyntaxKind kind, NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, Token propertyOrSequence, Token openParen, PropertySpecSyntax& propertySpec, Token closeParen, ActionBlockSyntax& action) {
    return *alloc.emplace<ConcurrentAssertionStatementSyntax>(kind, label, attributes, keyword, propertyOrSequence, openParen, propertySpec, closeParen, action);
}

ConcurrentAssertionMemberSyntax& SyntaxFactory::concurrentAssertionMember(SyntaxList<AttributeInstanceSyntax> attributes, ConcurrentAssertionStatementSyntax& statement) {
    return *alloc.emplace<ConcurrentAssertionMemberSyntax>(attributes, statement);
}

ImmediateAssertionMemberSyntax& SyntaxFactory::immediateAssertionMember(SyntaxList<AttributeInstanceSyntax> attributes, ImmediateAssertionStatementSyntax& statement) {
    return *alloc.emplace<ImmediateAssertionMemberSyntax>(attributes, statement);
}

EmptyStatementSyntax& SyntaxFactory::emptyStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token semicolon) {
    return *alloc.emplace<EmptyStatementSyntax>(label, attributes, semicolon);
}

ConditionalStatementSyntax& SyntaxFactory::conditionalStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token uniqueOrPriority, Token ifKeyword, Token openParen, ConditionalPredicateSyntax& predicate, Token closeParen, StatementSyntax& statement, ElseClauseSyntax* elseClause) {
    return *alloc.emplace<ConditionalStatementSyntax>(label, attributes, uniqueOrPriority, ifKeyword, openParen, predicate, closeParen, statement, elseClause);
}

DefaultCaseItemSyntax& SyntaxFactory::defaultCaseItem(Token defaultKeyword, Token colon, SyntaxNode& clause) {
    return *alloc.emplace<DefaultCaseItemSyntax>(defaultKeyword, colon, clause);
}

PatternCaseItemSyntax& SyntaxFactory::patternCaseItem(PatternSyntax& pattern, Token tripleAnd, ExpressionSyntax* expr, Token colon, StatementSyntax& statement) {
    return *alloc.emplace<PatternCaseItemSyntax>(pattern, tripleAnd, expr, colon, statement);
}

StandardCaseItemSyntax& SyntaxFactory::standardCaseItem(SeparatedSyntaxList<ExpressionSyntax> expressions, Token colon, SyntaxNode& clause) {
    return *alloc.emplace<StandardCaseItemSyntax>(expressions, colon, clause);
}

CaseStatementSyntax& SyntaxFactory::caseStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token uniqueOrPriority, Token caseKeyword, Token openParen, ExpressionSyntax& expr, Token closeParen, Token matchesOrInside, SyntaxList<CaseItemSyntax> items, Token endcase) {
    return *alloc.emplace<CaseStatementSyntax>(label, attributes, uniqueOrPriority, caseKeyword, openParen, expr, closeParen, matchesOrInside, items, endcase);
}

ForeverStatementSyntax& SyntaxFactory::foreverStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token foreverKeyword, StatementSyntax& statement) {
    return *alloc.emplace<ForeverStatementSyntax>(label, attributes, foreverKeyword, statement);
}

LoopStatementSyntax& SyntaxFactory::loopStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token repeatOrWhile, Token openParen, ExpressionSyntax& expr, Token closeParen, StatementSyntax& statement) {
    return *alloc.emplace<LoopStatementSyntax>(label, attributes, repeatOrWhile, openParen, expr, closeParen, statement);
}

DoWhileStatementSyntax& SyntaxFactory::doWhileStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token doKeyword, StatementSyntax& statement, Token whileKeyword, Token openParen, ExpressionSyntax& expr, Token closeParen, Token semi) {
    return *alloc.emplace<DoWhileStatementSyntax>(label, attributes, doKeyword, statement, whileKeyword, openParen, expr, closeParen, semi);
}

ForVariableDeclarationSyntax& SyntaxFactory::forVariableDeclaration(Token varKeyword, DataTypeSyntax& type, VariableDeclaratorSyntax& declarator) {
    return *alloc.emplace<ForVariableDeclarationSyntax>(varKeyword, type, declarator);
}

ForLoopStatementSyntax& SyntaxFactory::forLoopStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token forKeyword, Token openParen, SeparatedSyntaxList<SyntaxNode> initializers, Token semi1, ExpressionSyntax& stopExpr, Token semi2, SeparatedSyntaxList<ExpressionSyntax> steps, Token closeParen, StatementSyntax& statement) {
    return *alloc.emplace<ForLoopStatementSyntax>(label, attributes, forKeyword, openParen, initializers, semi1, stopExpr, semi2, steps, closeParen, statement);
}

ForeachLoopListSyntax& SyntaxFactory::foreachLoopList(Token openParen, NameSyntax& arrayName, Token openBracket, SeparatedSyntaxList<NameSyntax> loopVariables, Token closeBracket, Token closeParen) {
    return *alloc.emplace<ForeachLoopListSyntax>(openParen, arrayName, openBracket, loopVariables, closeBracket, closeParen);
}

ForeachLoopStatementSyntax& SyntaxFactory::foreachLoopStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, ForeachLoopListSyntax& loopList, StatementSyntax& statement) {
    return *alloc.emplace<ForeachLoopStatementSyntax>(label, attributes, keyword, loopList, statement);
}

ReturnStatementSyntax& SyntaxFactory::returnStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token returnKeyword, ExpressionSyntax* returnValue, Token semi) {
    return *alloc.emplace<ReturnStatementSyntax>(label, attributes, returnKeyword, returnValue, semi);
}

JumpStatementSyntax& SyntaxFactory::jumpStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token breakOrContinue, Token semi) {
    return *alloc.emplace<JumpStatementSyntax>(label, attributes, breakOrContinue, semi);
}

TimingControlStatementSyntax& SyntaxFactory::timingControlStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, TimingControlSyntax& timingControl, StatementSyntax& statement) {
    return *alloc.emplace<TimingControlStatementSyntax>(label, attributes, timingControl, statement);
}

ExpressionStatementSyntax& SyntaxFactory::expressionStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, ExpressionSyntax& expr, Token semi) {
    return *alloc.emplace<ExpressionStatementSyntax>(label, attributes, expr, semi);
}

ProceduralAssignStatementSyntax& SyntaxFactory::proceduralAssignStatement(SyntaxKind kind, NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, ExpressionSyntax& lvalue, Token equals, ExpressionSyntax& value, Token semi) {
    return *alloc.emplace<ProceduralAssignStatementSyntax>(kind, label, attributes, keyword, lvalue, equals, value, semi);
}

ProceduralDeassignStatementSyntax& SyntaxFactory::proceduralDeassignStatement(SyntaxKind kind, NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, ExpressionSyntax& variable, Token semi) {
    return *alloc.emplace<ProceduralDeassignStatementSyntax>(kind, label, attributes, keyword, variable, semi);
}

DisableStatementSyntax& SyntaxFactory::disableStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token disable, NameSyntax& name, Token semi) {
    return *alloc.emplace<DisableStatementSyntax>(label, attributes, disable, name, semi);
}

DisableForkStatementSyntax& SyntaxFactory::disableForkStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token disable, Token fork, Token semi) {
    return *alloc.emplace<DisableForkStatementSyntax>(label, attributes, disable, fork, semi);
}

NamedBlockClauseSyntax& SyntaxFactory::namedBlockClause(Token colon, Token name) {
    return *alloc.emplace<NamedBlockClauseSyntax>(colon, name);
}

BlockStatementSyntax& SyntaxFactory::blockStatement(SyntaxKind kind, NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token begin, NamedBlockClauseSyntax* blockName, SyntaxList<SyntaxNode> items, Token end, NamedBlockClauseSyntax* endBlockName) {
    return *alloc.emplace<BlockStatementSyntax>(kind, label, attributes, begin, blockName, items, end, endBlockName);
}

WaitStatementSyntax& SyntaxFactory::waitStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token wait, Token openParen, ExpressionSyntax& expr, Token closeParen, StatementSyntax& statement) {
    return *alloc.emplace<WaitStatementSyntax>(label, attributes, wait, openParen, expr, closeParen, statement);
}

WaitForkStatementSyntax& SyntaxFactory::waitForkStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token wait, Token fork, Token semi) {
    return *alloc.emplace<WaitForkStatementSyntax>(label, attributes, wait, fork, semi);
}

WaitOrderStatementSyntax& SyntaxFactory::waitOrderStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token wait_order, Token openParen, SeparatedSyntaxList<NameSyntax> names, Token closeParen, ActionBlockSyntax& action) {
    return *alloc.emplace<WaitOrderStatementSyntax>(label, attributes, wait_order, openParen, names, closeParen, action);
}

RandCaseItemSyntax& SyntaxFactory::randCaseItem(ExpressionSyntax& expr, Token colon, StatementSyntax& statement) {
    return *alloc.emplace<RandCaseItemSyntax>(expr, colon, statement);
}

RandCaseStatementSyntax& SyntaxFactory::randCaseStatement(NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token randCase, SyntaxList<RandCaseItemSyntax> items, Token endCase) {
    return *alloc.emplace<RandCaseStatementSyntax>(label, attributes, randCase, items, endCase);
}

EventTriggerStatementSyntax& SyntaxFactory::eventTriggerStatement(SyntaxKind kind, NamedLabelSyntax* label, SyntaxList<AttributeInstanceSyntax> attributes, Token trigger, TimingControlSyntax* timing, NameSyntax& name) {
    return *alloc.emplace<EventTriggerStatementSyntax>(kind, label, attributes, trigger, timing, name);
}

ImplicitNonAnsiPortSyntax& SyntaxFactory::implicitNonAnsiPort(ExpressionSyntax& expr) {
    return *alloc.emplace<ImplicitNonAnsiPortSyntax>(expr);
}

ExplicitNonAnsiPortSyntax& SyntaxFactory::explicitNonAnsiPort(Token dot, Token name, Token openParen, ExpressionSyntax* expr, Token closeParen) {
    return *alloc.emplace<ExplicitNonAnsiPortSyntax>(dot, name, openParen, expr, closeParen);
}

NonAnsiPortListSyntax& SyntaxFactory::nonAnsiPortList(Token openParen, SeparatedSyntaxList<NonAnsiPortSyntax> ports, Token closeParen) {
    return *alloc.emplace<NonAnsiPortListSyntax>(openParen, ports, closeParen);
}

InterfacePortHeaderSyntax& SyntaxFactory::interfacePortHeader(Token nameOrKeyword, DotMemberClauseSyntax* modport) {
    return *alloc.emplace<InterfacePortHeaderSyntax>(nameOrKeyword, modport);
}

VariablePortHeaderSyntax& SyntaxFactory::variablePortHeader(Token direction, Token varKeyword, DataTypeSyntax* type) {
    return *alloc.emplace<VariablePortHeaderSyntax>(direction, varKeyword, type);
}

InterconnectPortHeaderSyntax& SyntaxFactory::interconnectPortHeader(Token direction, Token interconnect, DataTypeSyntax* type) {
    return *alloc.emplace<InterconnectPortHeaderSyntax>(direction, interconnect, type);
}

NetPortHeaderSyntax& SyntaxFactory::netPortHeader(Token direction, Token netType, DataTypeSyntax& dataType) {
    return *alloc.emplace<NetPortHeaderSyntax>(direction, netType, dataType);
}

ImplicitAnsiPortSyntax& SyntaxFactory::implicitAnsiPort(SyntaxList<AttributeInstanceSyntax> attributes, PortHeaderSyntax& header, VariableDeclaratorSyntax& declarator) {
    return *alloc.emplace<ImplicitAnsiPortSyntax>(attributes, header, declarator);
}

ExplicitAnsiPortSyntax& SyntaxFactory::explicitAnsiPort(SyntaxList<AttributeInstanceSyntax> attributes, Token direction, Token dot, Token name, Token openParen, ExpressionSyntax* expr, Token closeParen) {
    return *alloc.emplace<ExplicitAnsiPortSyntax>(attributes, direction, dot, name, openParen, expr, closeParen);
}

AnsiPortListSyntax& SyntaxFactory::ansiPortList(Token openParen, SeparatedSyntaxList<MemberSyntax> ports, Token closeParen) {
    return *alloc.emplace<AnsiPortListSyntax>(openParen, ports, closeParen);
}

WildcardPortListSyntax& SyntaxFactory::wildcardPortList(Token openParen, Token dotStar, Token closeParen) {
    return *alloc.emplace<WildcardPortListSyntax>(openParen, dotStar, closeParen);
}

ParameterPortListSyntax& SyntaxFactory::parameterPortList(Token hash, Token openParen, SeparatedSyntaxList<ParameterDeclarationSyntax> declarations, Token closeParen) {
    return *alloc.emplace<ParameterPortListSyntax>(hash, openParen, declarations, closeParen);
}

ModuleHeaderSyntax& SyntaxFactory::moduleHeader(SyntaxKind kind, Token moduleKeyword, Token lifetime, Token name, SyntaxList<PackageImportDeclarationSyntax> imports, ParameterPortListSyntax* parameters, PortListSyntax* ports, Token semi) {
    return *alloc.emplace<ModuleHeaderSyntax>(kind, moduleKeyword, lifetime, name, imports, parameters, ports, semi);
}

ModuleDeclarationSyntax& SyntaxFactory::moduleDeclaration(SyntaxKind kind, SyntaxList<AttributeInstanceSyntax> attributes, ModuleHeaderSyntax& header, SyntaxList<MemberSyntax> members, Token endmodule, NamedBlockClauseSyntax* blockName) {
    return *alloc.emplace<ModuleDeclarationSyntax>(kind, attributes, header, members, endmodule, blockName);
}

ExternModuleSyntax& SyntaxFactory::externModule(Token externKeyword, ModuleHeaderSyntax& header) {
    return *alloc.emplace<ExternModuleSyntax>(externKeyword, header);
}

EmptyMemberSyntax& SyntaxFactory::emptyMember(SyntaxList<AttributeInstanceSyntax> attributes, TokenList qualifiers, Token semi) {
    return *alloc.emplace<EmptyMemberSyntax>(attributes, qualifiers, semi);
}

ProceduralBlockSyntax& SyntaxFactory::proceduralBlock(SyntaxKind kind, SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, StatementSyntax& statement) {
    return *alloc.emplace<ProceduralBlockSyntax>(kind, attributes, keyword, statement);
}

GenerateRegionSyntax& SyntaxFactory::generateRegion(SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, SyntaxList<MemberSyntax> members, Token endgenerate) {
    return *alloc.emplace<GenerateRegionSyntax>(attributes, keyword, members, endgenerate);
}

LoopGenerateSyntax& SyntaxFactory::loopGenerate(SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, Token openParen, Token genvar, Token identifier, Token equals, ExpressionSyntax& initialExpr, Token semi1, ExpressionSyntax& stopExpr, Token semi2, ExpressionSyntax& iterationExpr, Token closeParen, MemberSyntax& block) {
    return *alloc.emplace<LoopGenerateSyntax>(attributes, keyword, openParen, genvar, identifier, equals, initialExpr, semi1, stopExpr, semi2, iterationExpr, closeParen, block);
}

IfGenerateSyntax& SyntaxFactory::ifGenerate(SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, Token openParen, ExpressionSyntax& condition, Token closeParen, MemberSyntax& block, ElseClauseSyntax* elseClause) {
    return *alloc.emplace<IfGenerateSyntax>(attributes, keyword, openParen, condition, closeParen, block, elseClause);
}

CaseGenerateSyntax& SyntaxFactory::caseGenerate(SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, Token openParen, ExpressionSyntax& condition, Token closeParen, SyntaxList<CaseItemSyntax> items, Token endCase) {
    return *alloc.emplace<CaseGenerateSyntax>(attributes, keyword, openParen, condition, closeParen, items, endCase);
}

GenerateBlockSyntax& SyntaxFactory::generateBlock(SyntaxList<AttributeInstanceSyntax> attributes, NamedLabelSyntax* label, Token begin, NamedBlockClauseSyntax* beginName, SyntaxList<MemberSyntax> members, Token end, NamedBlockClauseSyntax* endName) {
    return *alloc.emplace<GenerateBlockSyntax>(attributes, label, begin, beginName, members, end, endName);
}

DividerClauseSyntax& SyntaxFactory::dividerClause(Token divide, Token value) {
    return *alloc.emplace<DividerClauseSyntax>(divide, value);
}

TimeUnitsDeclarationSyntax& SyntaxFactory::timeUnitsDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, Token time, DividerClauseSyntax* divider, Token semi) {
    return *alloc.emplace<TimeUnitsDeclarationSyntax>(attributes, keyword, time, divider, semi);
}

OrderedPortConnectionSyntax& SyntaxFactory::orderedPortConnection(SyntaxList<AttributeInstanceSyntax> attributes, ExpressionSyntax& expr) {
    return *alloc.emplace<OrderedPortConnectionSyntax>(attributes, expr);
}

NamedPortConnectionSyntax& SyntaxFactory::namedPortConnection(SyntaxList<AttributeInstanceSyntax> attributes, Token dot, Token name, Token openParen, ExpressionSyntax* expr, Token closeParen) {
    return *alloc.emplace<NamedPortConnectionSyntax>(attributes, dot, name, openParen, expr, closeParen);
}

WildcardPortConnectionSyntax& SyntaxFactory::wildcardPortConnection(SyntaxList<AttributeInstanceSyntax> attributes, Token dotStar) {
    return *alloc.emplace<WildcardPortConnectionSyntax>(attributes, dotStar);
}

HierarchicalInstanceSyntax& SyntaxFactory::hierarchicalInstance(Token name, SyntaxList<VariableDimensionSyntax> dimensions, Token openParen, SeparatedSyntaxList<PortConnectionSyntax> connections, Token closeParen) {
    return *alloc.emplace<HierarchicalInstanceSyntax>(name, dimensions, openParen, connections, closeParen);
}

HierarchyInstantiationSyntax& SyntaxFactory::hierarchyInstantiation(SyntaxList<AttributeInstanceSyntax> attributes, Token type, ParameterValueAssignmentSyntax* parameters, SeparatedSyntaxList<HierarchicalInstanceSyntax> instances, Token semi) {
    return *alloc.emplace<HierarchyInstantiationSyntax>(attributes, type, parameters, instances, semi);
}

FunctionPortSyntax& SyntaxFactory::functionPort(SyntaxList<AttributeInstanceSyntax> attributes, Token constKeyword, Token direction, Token varKeyword, DataTypeSyntax* dataType, VariableDeclaratorSyntax& declarator) {
    return *alloc.emplace<FunctionPortSyntax>(attributes, constKeyword, direction, varKeyword, dataType, declarator);
}

FunctionPortListSyntax& SyntaxFactory::functionPortList(Token openParen, SeparatedSyntaxList<FunctionPortSyntax> ports, Token closeParen) {
    return *alloc.emplace<FunctionPortListSyntax>(openParen, ports, closeParen);
}

FunctionPrototypeSyntax& SyntaxFactory::functionPrototype(Token keyword, Token lifetime, DataTypeSyntax* returnType, NameSyntax& name, FunctionPortListSyntax* portList, Token semi) {
    return *alloc.emplace<FunctionPrototypeSyntax>(keyword, lifetime, returnType, name, portList, semi);
}

FunctionDeclarationSyntax& SyntaxFactory::functionDeclaration(SyntaxKind kind, SyntaxList<AttributeInstanceSyntax> attributes, FunctionPrototypeSyntax& prototype, SyntaxList<SyntaxNode> items, Token end, NamedBlockClauseSyntax* endBlockName) {
    return *alloc.emplace<FunctionDeclarationSyntax>(kind, attributes, prototype, items, end, endBlockName);
}

AssertionItemPortSyntax& SyntaxFactory::assertionItemPort(SyntaxList<AttributeInstanceSyntax> attributes, Token local, Token direction, DataTypeSyntax& type, VariableDeclaratorSyntax& declarator) {
    return *alloc.emplace<AssertionItemPortSyntax>(attributes, local, direction, type, declarator);
}

AssertionItemPortListSyntax& SyntaxFactory::assertionItemPortList(Token openParen, SeparatedSyntaxList<AssertionItemPortSyntax> ports, Token closeParen) {
    return *alloc.emplace<AssertionItemPortListSyntax>(openParen, ports, closeParen);
}

LetDeclarationSyntax& SyntaxFactory::letDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, Token let, Token identifier, AssertionItemPortListSyntax* portList, EqualsValueClauseSyntax& initializer, Token semi) {
    return *alloc.emplace<LetDeclarationSyntax>(attributes, let, identifier, portList, initializer, semi);
}

PropertyDeclarationSyntax& SyntaxFactory::propertyDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, Token name, AssertionItemPortListSyntax* portList, Token semi, SyntaxList<MemberSyntax> assertionVariables, PropertySpecSyntax& propertySpec, Token optionalSemi, Token end, NamedBlockClauseSyntax* endBlockName) {
    return *alloc.emplace<PropertyDeclarationSyntax>(attributes, keyword, name, portList, semi, assertionVariables, propertySpec, optionalSemi, end, endBlockName);
}

SequenceDeclarationSyntax& SyntaxFactory::sequenceDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, Token name, AssertionItemPortListSyntax* portList, Token semi, SyntaxList<MemberSyntax> assertionVariables, ExpressionSyntax& seqExpr, Token optionalSemi, Token end, NamedBlockClauseSyntax* endBlockName) {
    return *alloc.emplace<SequenceDeclarationSyntax>(attributes, keyword, name, portList, semi, assertionVariables, seqExpr, optionalSemi, end, endBlockName);
}

ExtendsClauseSyntax& SyntaxFactory::extendsClause(Token keyword, NameSyntax& baseName, ArgumentListSyntax* arguments) {
    return *alloc.emplace<ExtendsClauseSyntax>(keyword, baseName, arguments);
}

ImplementsClauseSyntax& SyntaxFactory::implementsClause(Token keyword, SeparatedSyntaxList<NameSyntax> interfaces) {
    return *alloc.emplace<ImplementsClauseSyntax>(keyword, interfaces);
}

ClassDeclarationSyntax& SyntaxFactory::classDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, Token virtualOrInterface, Token classKeyword, Token lifetime, Token name, ParameterPortListSyntax* parameters, ExtendsClauseSyntax* extendsClause, ImplementsClauseSyntax* implementsClause, Token semi, SyntaxList<MemberSyntax> items, Token endClass, NamedBlockClauseSyntax* endBlockName) {
    return *alloc.emplace<ClassDeclarationSyntax>(attributes, virtualOrInterface, classKeyword, lifetime, name, parameters, extendsClause, implementsClause, semi, items, endClass, endBlockName);
}

ClassPropertyDeclarationSyntax& SyntaxFactory::classPropertyDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, TokenList qualifiers, MemberSyntax& declaration) {
    return *alloc.emplace<ClassPropertyDeclarationSyntax>(attributes, qualifiers, declaration);
}

ClassMethodDeclarationSyntax& SyntaxFactory::classMethodDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, TokenList qualifiers, FunctionDeclarationSyntax& declaration) {
    return *alloc.emplace<ClassMethodDeclarationSyntax>(attributes, qualifiers, declaration);
}

ClassMethodPrototypeSyntax& SyntaxFactory::classMethodPrototype(SyntaxList<AttributeInstanceSyntax> attributes, TokenList qualifiers, FunctionPrototypeSyntax& prototype) {
    return *alloc.emplace<ClassMethodPrototypeSyntax>(attributes, qualifiers, prototype);
}

ContinuousAssignSyntax& SyntaxFactory::continuousAssign(SyntaxList<AttributeInstanceSyntax> attributes, Token assign, SeparatedSyntaxList<ExpressionSyntax> assignments, Token semi) {
    return *alloc.emplace<ContinuousAssignSyntax>(attributes, assign, assignments, semi);
}

DefParamAssignmentSyntax& SyntaxFactory::defParamAssignment(NameSyntax& name, EqualsValueClauseSyntax* setter) {
    return *alloc.emplace<DefParamAssignmentSyntax>(name, setter);
}

DefParamSyntax& SyntaxFactory::defParam(SyntaxList<AttributeInstanceSyntax> attributes, Token defparam, SeparatedSyntaxList<DefParamAssignmentSyntax> assignments, Token semi) {
    return *alloc.emplace<DefParamSyntax>(attributes, defparam, assignments, semi);
}

ModportItemSyntax& SyntaxFactory::modportItem(Token name, AnsiPortListSyntax& ports) {
    return *alloc.emplace<ModportItemSyntax>(name, ports);
}

ModportDeclarationSyntax& SyntaxFactory::modportDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, SeparatedSyntaxList<ModportItemSyntax> items, Token semi) {
    return *alloc.emplace<ModportDeclarationSyntax>(attributes, keyword, items, semi);
}

ClockingSkewSyntax& SyntaxFactory::clockingSkew(Token edge, Token hash, ExpressionSyntax* value) {
    return *alloc.emplace<ClockingSkewSyntax>(edge, hash, value);
}

ClockingDirectionSyntax& SyntaxFactory::clockingDirection(Token input, ClockingSkewSyntax* inputSkew, Token output, ClockingSkewSyntax* ouputSkew, Token inout) {
    return *alloc.emplace<ClockingDirectionSyntax>(input, inputSkew, output, ouputSkew, inout);
}

ClockingItemSyntax& SyntaxFactory::clockingItem(Token defaultKeyword, ClockingDirectionSyntax* direction, SeparatedSyntaxList<AttributeSpecSyntax> assignments, Token semi, MemberSyntax* declaration) {
    return *alloc.emplace<ClockingItemSyntax>(defaultKeyword, direction, assignments, semi, declaration);
}

ClockingDeclarationSyntax& SyntaxFactory::clockingDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, Token globalOrDefault, Token clocking, Token blockName, Token at, ParenthesizedEventExpressionSyntax* event, Token eventIdentifier, Token semi, SyntaxList<ClockingItemSyntax> items, Token endClocking, NamedBlockClauseSyntax* endBlockName) {
    return *alloc.emplace<ClockingDeclarationSyntax>(attributes, globalOrDefault, clocking, blockName, at, event, eventIdentifier, semi, items, endClocking, endBlockName);
}

DPIImportExportSyntax& SyntaxFactory::dPIImportExport(SyntaxList<AttributeInstanceSyntax> attributes, Token keyword, Token stringLiteral, Token property, Token name, Token equals, FunctionPrototypeSyntax& method) {
    return *alloc.emplace<DPIImportExportSyntax>(attributes, keyword, stringLiteral, property, name, equals, method);
}

DistWeightSyntax& SyntaxFactory::distWeight(Token op, ExpressionSyntax& expr) {
    return *alloc.emplace<DistWeightSyntax>(op, expr);
}

DistItemSyntax& SyntaxFactory::distItem(ExpressionSyntax& range, DistWeightSyntax* weight) {
    return *alloc.emplace<DistItemSyntax>(range, weight);
}

DistConstraintListSyntax& SyntaxFactory::distConstraintList(Token dist, Token openBrace, SeparatedSyntaxList<DistItemSyntax> items, Token closeBrace) {
    return *alloc.emplace<DistConstraintListSyntax>(dist, openBrace, items, closeBrace);
}

ExpressionOrDistSyntax& SyntaxFactory::expressionOrDist(ExpressionSyntax& expr, DistConstraintListSyntax& distribution) {
    return *alloc.emplace<ExpressionOrDistSyntax>(expr, distribution);
}

ExpressionConstraintSyntax& SyntaxFactory::expressionConstraint(Token soft, ExpressionSyntax& expr, Token semi) {
    return *alloc.emplace<ExpressionConstraintSyntax>(soft, expr, semi);
}

UniquenessConstraintSyntax& SyntaxFactory::uniquenessConstraint(Token unique, OpenRangeListSyntax& ranges, Token semi) {
    return *alloc.emplace<UniquenessConstraintSyntax>(unique, ranges, semi);
}

ImplicationConstraintSyntax& SyntaxFactory::implicationConstraint(ExpressionSyntax& left, Token arrow, ConstraintItemSyntax& constraints) {
    return *alloc.emplace<ImplicationConstraintSyntax>(left, arrow, constraints);
}

ElseConstraintClauseSyntax& SyntaxFactory::elseConstraintClause(Token elseKeyword, ConstraintItemSyntax& constraints) {
    return *alloc.emplace<ElseConstraintClauseSyntax>(elseKeyword, constraints);
}

ConditionalConstraintSyntax& SyntaxFactory::conditionalConstraint(Token ifKeyword, Token openParen, ExpressionSyntax& condition, Token closeParen, ConstraintItemSyntax& constraints, ElseConstraintClauseSyntax* elseClause) {
    return *alloc.emplace<ConditionalConstraintSyntax>(ifKeyword, openParen, condition, closeParen, constraints, elseClause);
}

LoopConstraintSyntax& SyntaxFactory::loopConstraint(Token foreachKeyword, ForeachLoopListSyntax& loopList, ConstraintItemSyntax& constraints) {
    return *alloc.emplace<LoopConstraintSyntax>(foreachKeyword, loopList, constraints);
}

DisableConstraintSyntax& SyntaxFactory::disableConstraint(Token disable, Token soft, NameSyntax& name, Token semi) {
    return *alloc.emplace<DisableConstraintSyntax>(disable, soft, name, semi);
}

SolveBeforeConstraintSyntax& SyntaxFactory::solveBeforeConstraint(Token solve, SeparatedSyntaxList<ExpressionSyntax> beforeExpr, Token before, SeparatedSyntaxList<ExpressionSyntax> afterExpr, Token semi) {
    return *alloc.emplace<SolveBeforeConstraintSyntax>(solve, beforeExpr, before, afterExpr, semi);
}

ConstraintBlockSyntax& SyntaxFactory::constraintBlock(Token openBrace, SyntaxList<ConstraintItemSyntax> items, Token closeBrace) {
    return *alloc.emplace<ConstraintBlockSyntax>(openBrace, items, closeBrace);
}

ConstraintPrototypeSyntax& SyntaxFactory::constraintPrototype(SyntaxList<AttributeInstanceSyntax> attributes, TokenList qualifiers, Token keyword, Token name, Token semi) {
    return *alloc.emplace<ConstraintPrototypeSyntax>(attributes, qualifiers, keyword, name, semi);
}

ConstraintDeclarationSyntax& SyntaxFactory::constraintDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, TokenList qualifiers, Token keyword, Token name, ConstraintBlockSyntax& block) {
    return *alloc.emplace<ConstraintDeclarationSyntax>(attributes, qualifiers, keyword, name, block);
}

WithClauseSyntax& SyntaxFactory::withClause(Token with, Token openParen, ExpressionSyntax& expr, Token closeParen) {
    return *alloc.emplace<WithClauseSyntax>(with, openParen, expr, closeParen);
}

IdentifierListSyntax& SyntaxFactory::identifierList(Token openParen, SeparatedSyntaxList<IdentifierNameSyntax> identifiers, Token closeParen) {
    return *alloc.emplace<IdentifierListSyntax>(openParen, identifiers, closeParen);
}

RandomizeMethodWithClauseSyntax& SyntaxFactory::randomizeMethodWithClause(Token with, IdentifierListSyntax* names, ConstraintBlockSyntax& constraints) {
    return *alloc.emplace<RandomizeMethodWithClauseSyntax>(with, names, constraints);
}

WithFunctionSampleSyntax& SyntaxFactory::withFunctionSample(Token with, Token function, Token sample, AnsiPortListSyntax& portList) {
    return *alloc.emplace<WithFunctionSampleSyntax>(with, function, sample, portList);
}

BinaryBlockEventExpressionSyntax& SyntaxFactory::binaryBlockEventExpression(BlockEventExpressionSyntax& left, Token orKeyword, BlockEventExpressionSyntax& right) {
    return *alloc.emplace<BinaryBlockEventExpressionSyntax>(left, orKeyword, right);
}

PrimaryBlockEventExpressionSyntax& SyntaxFactory::primaryBlockEventExpression(Token keyword, NameSyntax& name) {
    return *alloc.emplace<PrimaryBlockEventExpressionSyntax>(keyword, name);
}

BlockCoverageEventSyntax& SyntaxFactory::blockCoverageEvent(Token atat, Token openParen, BlockEventExpressionSyntax& expr, Token closeParen) {
    return *alloc.emplace<BlockCoverageEventSyntax>(atat, openParen, expr, closeParen);
}

CovergroupDeclarationSyntax& SyntaxFactory::covergroupDeclaration(SyntaxList<AttributeInstanceSyntax> attributes, Token covergroup, Token name, AnsiPortListSyntax* portList, SyntaxNode* event, Token semi, SyntaxList<MemberSyntax> members, Token endgroup, NamedBlockClauseSyntax* endBlockName) {
    return *alloc.emplace<CovergroupDeclarationSyntax>(attributes, covergroup, name, portList, event, semi, members, endgroup, endBlockName);
}

CoverageOptionSyntax& SyntaxFactory::coverageOption(SyntaxList<AttributeInstanceSyntax> attributes, Token option, Token dot, Token name, Token equals, ExpressionSyntax& expr, Token semi) {
    return *alloc.emplace<CoverageOptionSyntax>(attributes, option, dot, name, equals, expr, semi);
}

CoverpointSyntax& SyntaxFactory::coverpoint(SyntaxList<AttributeInstanceSyntax> attributes, DataTypeSyntax* type, NamedLabelSyntax* label, Token coverpoint, ExpressionSyntax& expr, Token openBrace, SyntaxList<MemberSyntax> members, Token closeBrace, Token emptySemi) {
    return *alloc.emplace<CoverpointSyntax>(attributes, type, label, coverpoint, expr, openBrace, members, closeBrace, emptySemi);
}

DefaultCoverageBinInitializerSyntax& SyntaxFactory::defaultCoverageBinInitializer(Token defaultKeyword, Token sequenceKeyword) {
    return *alloc.emplace<DefaultCoverageBinInitializerSyntax>(defaultKeyword, sequenceKeyword);
}

ExpressionCoverageBinInitializerSyntax& SyntaxFactory::expressionCoverageBinInitializer(ExpressionSyntax& expr, WithClauseSyntax* withClause) {
    return *alloc.emplace<ExpressionCoverageBinInitializerSyntax>(expr, withClause);
}

RangeCoverageBinInitializerSyntax& SyntaxFactory::rangeCoverageBinInitializer(OpenRangeListSyntax& ranges, WithClauseSyntax* withClause) {
    return *alloc.emplace<RangeCoverageBinInitializerSyntax>(ranges, withClause);
}

TransRepeatRangeSyntax& SyntaxFactory::transRepeatRange(Token openBracket, Token specifier, SelectorSyntax* selector, Token closeBracket) {
    return *alloc.emplace<TransRepeatRangeSyntax>(openBracket, specifier, selector, closeBracket);
}

TransRangeSyntax& SyntaxFactory::transRange(SeparatedSyntaxList<ExpressionSyntax> items, TransRepeatRangeSyntax* repeat) {
    return *alloc.emplace<TransRangeSyntax>(items, repeat);
}

TransSetSyntax& SyntaxFactory::transSet(Token openParen, SeparatedSyntaxList<TransRangeSyntax> ranges, Token closeParen) {
    return *alloc.emplace<TransSetSyntax>(openParen, ranges, closeParen);
}

TransListCoverageBinInitializerSyntax& SyntaxFactory::transListCoverageBinInitializer(SeparatedSyntaxList<TransSetSyntax> sets, WithClauseSyntax* withClause) {
    return *alloc.emplace<TransListCoverageBinInitializerSyntax>(sets, withClause);
}

IffClauseSyntax& SyntaxFactory::iffClause(Token iff, Token openParen, ExpressionSyntax& expr, Token closeParen) {
    return *alloc.emplace<IffClauseSyntax>(iff, openParen, expr, closeParen);
}

CoverageBinsSyntax& SyntaxFactory::coverageBins(SyntaxList<AttributeInstanceSyntax> attributes, Token wildcard, Token keyword, Token name, ElementSelectSyntax* selector, Token equals, CoverageBinInitializerSyntax& initializer, IffClauseSyntax* iff, Token semi) {
    return *alloc.emplace<CoverageBinsSyntax>(attributes, wildcard, keyword, name, selector, equals, initializer, iff, semi);
}

CompilationUnitSyntax& SyntaxFactory::compilationUnit(SyntaxList<MemberSyntax> members, Token endOfFile) {
    return *alloc.emplace<CompilationUnitSyntax>(members, endOfFile);
}

SimpleDirectiveSyntax& SyntaxFactory::simpleDirective(SyntaxKind kind, Token directive, Token endOfDirective) {
    return *alloc.emplace<SimpleDirectiveSyntax>(kind, directive, endOfDirective);
}

IncludeDirectiveSyntax& SyntaxFactory::includeDirective(Token directive, Token fileName, Token endOfDirective) {
    return *alloc.emplace<IncludeDirectiveSyntax>(directive, fileName, endOfDirective);
}

ConditionalBranchDirectiveSyntax& SyntaxFactory::conditionalBranchDirective(SyntaxKind kind, Token directive, Token name, Token endOfDirective, TokenList disabledTokens) {
    return *alloc.emplace<ConditionalBranchDirectiveSyntax>(kind, directive, name, endOfDirective, disabledTokens);
}

UnconditionalBranchDirectiveSyntax& SyntaxFactory::unconditionalBranchDirective(SyntaxKind kind, Token directive, Token endOfDirective, TokenList disabledTokens) {
    return *alloc.emplace<UnconditionalBranchDirectiveSyntax>(kind, directive, endOfDirective, disabledTokens);
}

MacroArgumentDefaultSyntax& SyntaxFactory::macroArgumentDefault(Token equals, TokenList tokens) {
    return *alloc.emplace<MacroArgumentDefaultSyntax>(equals, tokens);
}

MacroFormalArgumentSyntax& SyntaxFactory::macroFormalArgument(Token name, MacroArgumentDefaultSyntax* defaultValue) {
    return *alloc.emplace<MacroFormalArgumentSyntax>(name, defaultValue);
}

MacroFormalArgumentListSyntax& SyntaxFactory::macroFormalArgumentList(Token openParen, SeparatedSyntaxList<MacroFormalArgumentSyntax> args, Token closeParen) {
    return *alloc.emplace<MacroFormalArgumentListSyntax>(openParen, args, closeParen);
}

DefineDirectiveSyntax& SyntaxFactory::defineDirective(Token directive, Token name, MacroFormalArgumentListSyntax* formalArguments, TokenList body, Token endOfDirective) {
    return *alloc.emplace<DefineDirectiveSyntax>(directive, name, formalArguments, body, endOfDirective);
}

MacroActualArgumentSyntax& SyntaxFactory::macroActualArgument(TokenList tokens) {
    return *alloc.emplace<MacroActualArgumentSyntax>(tokens);
}

MacroActualArgumentListSyntax& SyntaxFactory::macroActualArgumentList(Token openParen, SeparatedSyntaxList<MacroActualArgumentSyntax> args, Token closeParen) {
    return *alloc.emplace<MacroActualArgumentListSyntax>(openParen, args, closeParen);
}

MacroUsageSyntax& SyntaxFactory::macroUsage(Token directive, MacroActualArgumentListSyntax* args) {
    return *alloc.emplace<MacroUsageSyntax>(directive, args);
}

TimescaleDirectiveSyntax& SyntaxFactory::timescaleDirective(Token directive, Token timeUnit, Token timeUnitUnit, Token slash, Token timePrecision, Token timePrecisionUnit, Token endOfDirective) {
    return *alloc.emplace<TimescaleDirectiveSyntax>(directive, timeUnit, timeUnitUnit, slash, timePrecision, timePrecisionUnit, endOfDirective);
}

DefaultNetTypeDirectiveSyntax& SyntaxFactory::defaultNetTypeDirective(Token directive, Token netType, Token endOfDirective) {
    return *alloc.emplace<DefaultNetTypeDirectiveSyntax>(directive, netType, endOfDirective);
}

LineDirectiveSyntax& SyntaxFactory::lineDirective(Token directive, Token lineNumber, Token fileName, Token level, Token endOfDirective) {
    return *alloc.emplace<LineDirectiveSyntax>(directive, lineNumber, fileName, level, endOfDirective);
}

UndefDirectiveSyntax& SyntaxFactory::undefDirective(Token directive, Token name, Token endOfDirective) {
    return *alloc.emplace<UndefDirectiveSyntax>(directive, name, endOfDirective);
}

BeginKeywordsDirectiveSyntax& SyntaxFactory::beginKeywordsDirective(Token directive, Token versionSpecifier, Token endOfDirective) {
    return *alloc.emplace<BeginKeywordsDirectiveSyntax>(directive, versionSpecifier, endOfDirective);
}

}
